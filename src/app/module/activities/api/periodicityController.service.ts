/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { PagePeriodicityResponseDTO } from '../model/pagePeriodicityResponseDTO';
import { PeriodicityNameRequestDTO } from '../model/periodicityNameRequestDTO';
import { PeriodicityRequestDTO } from '../model/periodicityRequestDTO';
import { PeriodicityResponseDTO } from '../model/periodicityResponseDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PeriodicityControllerService {

    protected basePath = 'https://172.100.10.34:8080/ws-sgm-activities/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Cria uma Periodicidade
     * 
     * @param periodicity Peridiocidade
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createUsingPOST1(periodicity: PeriodicityRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<PeriodicityResponseDTO>;
    public createUsingPOST1(periodicity: PeriodicityRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PeriodicityResponseDTO>>;
    public createUsingPOST1(periodicity: PeriodicityRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PeriodicityResponseDTO>>;
    public createUsingPOST1(periodicity: PeriodicityRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (periodicity === null || periodicity === undefined) {
            throw new Error('Required parameter periodicity was null or undefined when calling createUsingPOST1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<PeriodicityResponseDTO>(`${this.basePath}/periodicities`,
            periodicity,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deleta uma Periodicidade
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUsingDELETE1(id?: number, observe?: 'body', reportProgress?: boolean): Observable<PeriodicityResponseDTO>;
    public deleteUsingDELETE1(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PeriodicityResponseDTO>>;
    public deleteUsingDELETE1(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PeriodicityResponseDTO>>;
    public deleteUsingDELETE1(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<PeriodicityResponseDTO>(`${this.basePath}/periodicities/id/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retorna uma Periodicidade
     * 
     * @param id Id da Periodicidade
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findUsingGET1(id: number, observe?: 'body', reportProgress?: boolean): Observable<PeriodicityResponseDTO>;
    public findUsingGET1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PeriodicityResponseDTO>>;
    public findUsingGET1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PeriodicityResponseDTO>>;
    public findUsingGET1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<PeriodicityResponseDTO>(`${this.basePath}/periodicities/id/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lista todos as periodicidades de forma paginada
     * 
     * @param page page
     * @param count count
     * @param order order
     * @param sort sort
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllPageOrdersUsingGET1(page?: number, count?: number, order?: string, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<PagePeriodicityResponseDTO>;
    public getAllPageOrdersUsingGET1(page?: number, count?: number, order?: string, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagePeriodicityResponseDTO>>;
    public getAllPageOrdersUsingGET1(page?: number, count?: number, order?: string, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagePeriodicityResponseDTO>>;
    public getAllPageOrdersUsingGET1(page?: number, count?: number, order?: string, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (count !== undefined) {
            queryParameters = queryParameters.set('count', <any>count);
        }
        if (order !== undefined) {
            queryParameters = queryParameters.set('order', <any>order);
        }
        if (sort !== undefined) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<PagePeriodicityResponseDTO>(`${this.basePath}/periodicities/pagination`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retorna todas as peridiocidades
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllUsingGET1(observe?: 'body', reportProgress?: boolean): Observable<Array<PeriodicityResponseDTO>>;
    public getAllUsingGET1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PeriodicityResponseDTO>>>;
    public getAllUsingGET1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PeriodicityResponseDTO>>>;
    public getAllUsingGET1(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<PeriodicityResponseDTO>>(`${this.basePath}/periodicities/all`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retorna atividades pelo id da Companhia
     * 
     * @param idCompany Id da Companhia
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByIdCompanyUsingGET1(idCompany: number, observe?: 'body', reportProgress?: boolean): Observable<Array<PeriodicityResponseDTO>>;
    public getByIdCompanyUsingGET1(idCompany: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PeriodicityResponseDTO>>>;
    public getByIdCompanyUsingGET1(idCompany: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PeriodicityResponseDTO>>>;
    public getByIdCompanyUsingGET1(idCompany: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idCompany === null || idCompany === undefined) {
            throw new Error('Required parameter idCompany was null or undefined when calling getByIdCompanyUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<PeriodicityResponseDTO>>(`${this.basePath}/periodicities/company/${encodeURIComponent(String(idCompany))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retorna Periodicidade pela nome e companhia
     * 
     * @param periodicity periodicidade
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByNameUsingPOST(periodicity?: PeriodicityNameRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<Array<PeriodicityResponseDTO>>;
    public getByNameUsingPOST(periodicity?: PeriodicityNameRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PeriodicityResponseDTO>>>;
    public getByNameUsingPOST(periodicity?: PeriodicityNameRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PeriodicityResponseDTO>>>;
    public getByNameUsingPOST(periodicity?: PeriodicityNameRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Array<PeriodicityResponseDTO>>(`${this.basePath}/periodicities/name`,
            periodicity,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Atualiza uma Periodicidade
     * 
     * @param periodicity Periodicidade
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUsingPUT1(periodicity: PeriodicityRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<PeriodicityResponseDTO>;
    public updateUsingPUT1(periodicity: PeriodicityRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PeriodicityResponseDTO>>;
    public updateUsingPUT1(periodicity: PeriodicityRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PeriodicityResponseDTO>>;
    public updateUsingPUT1(periodicity: PeriodicityRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (periodicity === null || periodicity === undefined) {
            throw new Error('Required parameter periodicity was null or undefined when calling updateUsingPUT1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<PeriodicityResponseDTO>(`${this.basePath}/periodicities`,
            periodicity,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
