/**
 * ws-performa
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.3.7-20190109095830
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { MaintenanceActionDTO } from '../model/maintenanceActionDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MaintenanceActionControllerService {

    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create new Maintenance Action
     * 
     * @param maintenanceActionDTO maintenanceAction
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createUsingPOST12(maintenanceActionDTO: MaintenanceActionDTO, observe?: 'body', reportProgress?: boolean): Observable<MaintenanceActionDTO>;
    public createUsingPOST12(maintenanceActionDTO: MaintenanceActionDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MaintenanceActionDTO>>;
    public createUsingPOST12(maintenanceActionDTO: MaintenanceActionDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MaintenanceActionDTO>>;
    public createUsingPOST12(maintenanceActionDTO: MaintenanceActionDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (maintenanceActionDTO === null || maintenanceActionDTO === undefined) {
            throw new Error('Required parameter maintenanceActionDTO was null or undefined when calling createUsingPOST12.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<MaintenanceActionDTO>(`${this.basePath}/maintenance-action`,
            maintenanceActionDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Maintenance Action
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUsingDELETE12(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteUsingDELETE12(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteUsingDELETE12(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteUsingDELETE12(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE12.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/maintenance-action/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Maintenance Action by id
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByIdUsingGET13(id: number, observe?: 'body', reportProgress?: boolean): Observable<MaintenanceActionDTO>;
    public findByIdUsingGET13(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MaintenanceActionDTO>>;
    public findByIdUsingGET13(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MaintenanceActionDTO>>;
    public findByIdUsingGET13(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET13.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<MaintenanceActionDTO>(`${this.basePath}/maintenance-action/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List all Maintenance Action Controller
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllUsingGET13(observe?: 'body', reportProgress?: boolean): Observable<Array<MaintenanceActionDTO>>;
    public getAllUsingGET13(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MaintenanceActionDTO>>>;
    public getAllUsingGET13(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MaintenanceActionDTO>>>;
    public getAllUsingGET13(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<MaintenanceActionDTO>>(`${this.basePath}/maintenance-action`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Maintenance Action
     * 
     * @param id id
     * @param maintenanceActionDTO maintenanceAction
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUsingPUT12(id: number, maintenanceActionDTO: MaintenanceActionDTO, observe?: 'body', reportProgress?: boolean): Observable<MaintenanceActionDTO>;
    public updateUsingPUT12(id: number, maintenanceActionDTO: MaintenanceActionDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MaintenanceActionDTO>>;
    public updateUsingPUT12(id: number, maintenanceActionDTO: MaintenanceActionDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MaintenanceActionDTO>>;
    public updateUsingPUT12(id: number, maintenanceActionDTO: MaintenanceActionDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT12.');
        }
        if (maintenanceActionDTO === null || maintenanceActionDTO === undefined) {
            throw new Error('Required parameter maintenanceActionDTO was null or undefined when calling updateUsingPUT12.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<MaintenanceActionDTO>(`${this.basePath}/maintenance-action/${encodeURIComponent(String(id))}`,
            maintenanceActionDTO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
