{"version":3,"sources":["webpack:///./src/app/containers/transports/transports.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAAuD;;;;;;;;;;AAE2B;AAEO;AAG9B;AAGX;AAGhD;IAEI,oCACc,UAAsB,EACzB,QAAqB;QADlB,eAAU,GAAV,UAAU,CAAY;QACzB,aAAQ,GAAR,QAAQ,CAAa;IAC7B,CAAC;IAEG,2CAAM,GAAb;QAEI,+CAA+C;QAC/C,yEAAyE;QAEzE,IAAI,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC1C,IAAM,WAAW,GAAG;YAChB,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACzB,cAAc,EAAG,mCAAmC;gBACpD,eAAe,EAAE,SAAS,IAAG,KAAG,KAAO;aACtC,CAAC;SACL,CAAC;QAGF,IAAM,QAAQ,GAAG,IAAI,eAAe,EAAE,CAAC;QACvC,mBAAmB;QACnB,uCAAuC;QACvC,uCAAuC;QACvC,QAAQ,CAAC,GAAG,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;QAEvC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;QAEjC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAY,wEAAW,CAAC,MAAM,CAAC,UAAU,GAAG,2BAA2B,EAAC,WAAW,CAC5G,CAAC;IACN,CAAC;IAEM,sDAAiB,GAAxB,UAAyB,KAAa;QAElC,+CAA+C;QAC/C,yEAAyE;QAEzE,IAAI,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC1C,IAAM,WAAW,GAAG;YAChB,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACzB,cAAc,EAAG,mCAAmC;gBACpD,eAAe,EAAE,SAAS,IAAG,KAAG,KAAO;aACtC,CAAC;SACL,CAAC;QAGF,IAAM,QAAQ,GAAG,IAAI,eAAe,EAAE,CAAC;QACvC,mBAAmB;QACnB,uCAAuC;QACvC,uCAAuC;QACvC,QAAQ,CAAC,GAAG,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;QAEvC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;QAEjC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAY,gEAAgE,EAAC,WAAW,CACjH,CAAC;IACN,CAAC;IAEM,oDAAe,GAAtB,UAAuB,SAAc;QAEjC,IAAI,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC1C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAM,WAAW,GAAG;YAChB,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACzB,cAAc,EAAG,mCAAmC;gBACpD,eAAe,EAAE,SAAS,IAAG,KAAG,KAAO;aACtC,CAAC;SACL,CAAC;QAEF,IAAM,QAAQ,GAAG,IAAI,eAAe,EAAE,CAAC;QACvC,mBAAmB;QAEnB,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;QACrC,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,SAAS,CAAC,YAAY,CAAC,CAAC;QACrD,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC7C,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,SAAS,CAAC,YAAY,CAAC,CAAC;QAErD,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACzB,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAC3B,sCAAsC;QAEtC,uCAAuC;QACvC,wDAAwD;QACxD,0BAA0B;QAE1B,uEAAuE;QAEvE,oJAAoJ;QACpJ,qBAAqB;QACrB,2BAA2B;QAC3B,uFAAuF;QACvF,0CAA0C;QAC1C,0BAA0B;QAC1B,qDAAqD;QACrD,kFAAkF;QAClF,iBAAiB;QACjB,2BAA2B;QAC3B,8DAA8D;QAC9D,iFAAiF;QACjF,2CAA2C;QAC3C,4BAA4B;QAC5B,sCAAsC;QACtC,kCAAkC;QAClC,kBAAkB;QAElB,uDAAuD;QACvD,IAAI;QAEJ,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAE,wEAAW,CAAC,MAAM,CAAC,UAAU,GAAG,cAAc,GAAG,SAAS,CAAC,GAAG,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAAE,WAAW,CAAC,CAAC;IAClI,CAAC;IAEM,oDAAe,GAAtB,UAAuB,SAAc;QAEjC,IAAI,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC1C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAM,WAAW,GAAG;YAChB,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACzB,cAAc,EAAG,mCAAmC;gBACpD,eAAe,EAAE,SAAS,IAAG,KAAG,KAAO;aACtC,CAAC;SACL,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAEvB,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAE,wEAAW,CAAC,MAAM,CAAC,UAAU,GAAG,cAAc,GAAG,SAAS,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;IAC/G,CAAC;IAEM,sDAAiB,GAAxB,UAAyB,SAAc;QAEnC,IAAI,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC1C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAM,WAAW,GAAG;YAChB,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACzB,cAAc,EAAG,mCAAmC;gBACpD,eAAe,EAAE,SAAS,IAAG,KAAG,KAAO;aACtC,CAAC;SACL,CAAC;QAEF,IAAM,QAAQ,GAAG,IAAI,eAAe,EAAE,CAAC;QAEvC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAE,wEAAW,CAAC,MAAM,CAAC,OAAO,GAAG,4BAA4B,GAAG,SAAS,CAAC,EAAE,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;IACjI,CAAC;IAEM,wDAAmB,GAA1B,UAA2B,SAAc;QAErC,IAAI,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC1C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAM,WAAW,GAAG;YAChB,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACzB,cAAc,EAAG,mCAAmC;gBACpD,eAAe,EAAE,SAAS,IAAG,KAAG,KAAO;aACtC,CAAC;SACL,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACvB,IAAM,QAAQ,GAAG,IAAI,eAAe,EAAE,CAAC;QAEvC,QAAQ,CAAC,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC,aAAa,CAAC,CAAC;QAEvD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAE,wEAAW,CAAC,MAAM,CAAC,OAAO,GAAG,0BAA0B,GAAG,SAAS,CAAC,EAAE,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAAE,WAAW,CAAC,CAAC;IAC1I,CAAC;IArKQ,0BAA0B;QADtC,gEAAU,EAAE;yCAIiB,+DAAU;YACf,6DAAW;OAJvB,0BAA0B,CAsKtC;IAAD,iCAAC;CAAA;AAtKsC","file":"common.js","sourcesContent":["/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\n\nimport { Observable }                                        from 'rxjs';\nimport { environment } from 'environments/environment.dev';\nimport { Transport } from 'app/models/transports/transports.model';\nimport { Rastreador } from 'app/models/rastreadores/rastreadores.model';\nimport { MatSnackBar } from '@angular/material';\n\n@Injectable()\nexport class TransportControllerService {\n\n    constructor(\n        protected httpClient: HttpClient,\n        public snackBar: MatSnackBar\n    ) {}\n    \n    public getAll(): Observable<any> {\n        \n        // let username = 'aVgjhEBcnN-ytRrewsWJrSpoKnh'\n        // let password = 'q4fYtRGIkmLJKtx9Y5MaUYFPPdasd2QD4hTI4Gds45tgfSAdlkj'  \n        \n        let token = localStorage.getItem('token');\n        const httpOptions = {\n            headers: new HttpHeaders({\n            \"Content-Type\":  \"application/x-www-form-urlencoded\",\n            \"Authorization\": \"Bearer \" + `${token}`\n            }),\n        };\n\n\n        const formData = new URLSearchParams();\n        // append your data\n        //formData.set('username', <any>login);\n        //formData.set('password', <any>senha);\n        formData.set('grant_type', 'password');\n        \n        console.log(formData.getAll);\n        console.log(formData.toString());\n        \n        return this.httpClient.get<Transport>(environment.origin.transports + '/transports/alltransports',httpOptions,\n        );\n    }\n\n    public registerTransport(login: string): Observable<any> {\n        \n        // let username = 'aVgjhEBcnN-ytRrewsWJrSpoKnh'\n        // let password = 'q4fYtRGIkmLJKtx9Y5MaUYFPPdasd2QD4hTI4Gds45tgfSAdlkj'  \n        \n        let token = localStorage.getItem('token');\n        const httpOptions = {\n            headers: new HttpHeaders({\n            \"Content-Type\":  \"application/x-www-form-urlencoded\",\n            \"Authorization\": \"Bearer \" + `${token}`\n            }),\n        };\n\n\n        const formData = new URLSearchParams();\n        // append your data\n        //formData.set('username', <any>login);\n        //formData.set('password', <any>senha);\n        formData.set('grant_type', 'password');\n        \n        console.log(formData.getAll);\n        console.log(formData.toString());\n        \n        return this.httpClient.get<Transport>('https://lupa-v1.herokuapp.com/auth/v1/transports/alltransports',httpOptions,\n        );\n    }\n\n    public updateTransport(transport: any): Observable<any> {\n        \n        let token = localStorage.getItem('token');\n        console.log(token);\n        const httpOptions = {\n            headers: new HttpHeaders({\n            \"Content-Type\":  \"application/x-www-form-urlencoded\",\n            \"Authorization\": \"Bearer \" + `${token}`\n            }),\n        };\n        \n        const formData = new URLSearchParams();\n        // append your data\n\n        formData.set('type', transport.type);\n        formData.set('vehiclePlate', transport.vehiclePlate);\n        formData.set('capacity', transport.capacity);\n        formData.set('thirdCompany', transport.thirdCompany);\n        \n        console.log(formData.getAll);\n        console.log(formData.toString());\n        console.log(httpOptions); \n        console.log(transport._id);  \n        //console.log(transport.idRastreador);\n\n        // if(transport.idRastreador !== null){\n        //     const formDataRastreador = new URLSearchParams();\n        //     // append your data\n    \n        //     formDataRastreador.set('trackerSerial', transport.idRastreador);\n    \n        //     this.httpClient.put( environment.origin.transports + '/transports/linktracker/' + transport._id, formDataRastreador.toString(), httpOptions).\n        //         subscribe(\n        //             success => {\n        //                 //  this.snackBar.open('Transporte atualizado com sucesso!', 'OK', {\n        //                 //      duration: 10000\n        //                 //  });\n        //                 // Reload the table after the post\n        //                 console.log('Rastreador vinculado: ' + transport.idRastreador);\n        //             },\n        //             error => {  \n        //                 console.log(error.error.error_description);\n        //                 //   this.snackBar.open(error.error.error_description, 'OK', {\n        //                 //       duration: 10000\n        //                 //    });\n        //                 console.log(error);\n        //                 return 'error';\n        //             });\n            \n        //     console.log(transport.idRastreador);            \n        // }\n\n        return this.httpClient.put( environment.origin.transports + '/transports/' + transport._id, formData.toString(), httpOptions);\n    }\n\n    public deleteTransport(transport: any): Observable<any> {\n        \n        let token = localStorage.getItem('token');\n        console.log(token);\n        const httpOptions = {\n            headers: new HttpHeaders({\n            \"Content-Type\":  \"application/x-www-form-urlencoded\",\n            \"Authorization\": \"Bearer \" + `${token}`\n            }),\n        };\n               \n        console.log(transport);  \n\n        return this.httpClient.delete( environment.origin.transports + '/transports/' + transport.id, httpOptions);\n    }\n\n    public removerRastreador(transport: any): Observable<any> {\n        \n        let token = localStorage.getItem('token');\n        console.log(token);\n        const httpOptions = {\n            headers: new HttpHeaders({\n            \"Content-Type\":  \"application/x-www-form-urlencoded\",\n            \"Authorization\": \"Bearer \" + `${token}`\n            }),\n        };\n\n        const formData = new URLSearchParams();\n         \n        return this.httpClient.put( environment.origin.tracker + '/transports/unlinktracker/' + transport.id, formData, httpOptions);\n    }\n\n    public adicionarRastreador(transport: any): Observable<any> {\n        \n        let token = localStorage.getItem('token');\n        console.log(token);\n        const httpOptions = {\n            headers: new HttpHeaders({\n            \"Content-Type\":  \"application/x-www-form-urlencoded\",\n            \"Authorization\": \"Bearer \" + `${token}`\n            }),\n        };\n\n        console.log(transport);\n        const formData = new URLSearchParams();\n         \n        formData.set('trackerSerial', transport.trackerSerial);\n\n        return this.httpClient.put( environment.origin.tracker + '/transports/linktracker/' + transport.id, formData.toString(), httpOptions);\n    }\n}\n"],"sourceRoot":""}