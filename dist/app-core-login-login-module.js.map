{"version":3,"sources":["webpack:///./src/app/core/common/route.animation.ts","webpack:///./src/app/core/login/login-routing.module.ts","webpack:///./src/app/core/login/login.component.html","webpack:///./src/app/core/login/login.component.scss","webpack:///./src/app/core/login/login.component.ts","webpack:///./src/app/core/login/login.module.ts","webpack:///./src/app/module/performa/api.module.ts","webpack:///./src/app/module/performa/api/api.ts","webpack:///./src/app/module/performa/api/areasController.service.ts","webpack:///./src/app/module/performa/api/companyController.service.ts","webpack:///./src/app/module/performa/api/databasesController.service.ts","webpack:///./src/app/module/performa/api/defectClassController.service.ts","webpack:///./src/app/module/performa/api/defectsController.service.ts","webpack:///./src/app/module/performa/api/departmentsController.service.ts","webpack:///./src/app/module/performa/api/downtimeDetailController.service.ts","webpack:///./src/app/module/performa/api/downtimeHeaderController.service.ts","webpack:///./src/app/module/performa/api/downtimeReasonController.service.ts","webpack:///./src/app/module/performa/api/downtimeTypeReasonController.service.ts","webpack:///./src/app/module/performa/api/employeesController.service.ts","webpack:///./src/app/module/performa/api/linesController.service.ts","webpack:///./src/app/module/performa/api/machinesController.service.ts","webpack:///./src/app/module/performa/api/maintenanceActionController.service.ts","webpack:///./src/app/module/performa/api/modelsController.service.ts","webpack:///./src/app/module/performa/api/modulesController.service.ts","webpack:///./src/app/module/performa/api/movementHeadersController.service.ts","webpack:///./src/app/module/performa/api/movementHistoriesController.service.ts","webpack:///./src/app/module/performa/api/positionController.service.ts","webpack:///./src/app/module/performa/api/productionOrdersController.service.ts","webpack:///./src/app/module/performa/api/profilesController.service.ts","webpack:///./src/app/module/performa/api/routesController.service.ts","webpack:///./src/app/module/performa/api/sessionsController.service.ts","webpack:///./src/app/module/performa/api/shiftsController.service.ts","webpack:///./src/app/module/performa/api/technicalActionsController.service.ts","webpack:///./src/app/module/performa/api/technicalAnalysisController.service.ts","webpack:///./src/app/module/performa/api/workstationsController.service.ts","webpack:///./src/app/module/performa/configuration.ts","webpack:///./src/app/module/performa/encoder.ts","webpack:///./src/app/module/performa/index.ts","webpack:///./src/app/module/performa/variables.ts","webpack:///./src/app/utils/utils.ts"],"names":[],"mappings":"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","file":"app-core-login-login-module.js","sourcesContent":["import { animate, state, style, transition, trigger } from '@angular/animations';\r\n\r\nexport let routeAnimation = trigger('routeAnimation', [\r\n  transition('void => *', [\r\n    style({\r\n      opacity: 0,\r\n    }),\r\n    animate('400ms 150ms ease-in-out', style({\r\n      opacity: 1,\r\n    }))\r\n  ]),\r\n]);\r\n\r\n\r\nexport let fadeOutAnimation = trigger('fadeOutAnimation', [\r\n  state('*', style({\r\n    position: 'absolute',\r\n    'min-width': '100%',\r\n    'min-height': '100%',\r\n    'max-width': '100%',\r\n    display: 'flex',\r\n    'flex-direction': 'column',\r\n    flex: '1',\r\n    height: '100%'\r\n  })),\r\n  state('void', style({\r\n    position: 'absolute',\r\n    'min-width': '100%',\r\n    'min-height': '100%',\r\n    'max-width': '100%',\r\n    display: 'flex',\r\n    'flex-direction': 'column',\r\n    flex: '1',\r\n    height: '100%'\r\n  })),\r\n  transition('* => void', [\r\n    style({\r\n      opacity: 1,\r\n    }),\r\n    animate('150ms linear', style({\r\n      opacity: 0,\r\n    }))\r\n  ]),\r\n]);\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './login.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule {\r\n}\r\n","module.exports = \"<div class=\\\"background\\\">\\r\\n    <div id=\\\"login\\\">\\r\\n        <div id=\\\"card\\\">\\r\\n            <div id=\\\"logo\\\">\\r\\n                <div id=\\\"title\\\">\\r\\n                    <span class=\\\"text\\\">RCR</span> \\r\\n                </div>\\r\\n                <div id=\\\"subtitle\\\">\\r\\n                    <span class=\\\"text\\\">Sistema de Rastreamento de Cargas e Rotas</span>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div id=\\\"conteiner\\\">\\r\\n\\r\\n                <div id=\\\"left\\\">\\r\\n                    <!-- left -->\\r\\n                    <!-- <div class=\\\"tag\\\">\\r\\n                        <div class=\\\"button\\\" [class.active]=\\\"inputType=='password'\\\" (click)=\\\"inputType='password'\\\">\\r\\n                            <div class=\\\"img\\\">\\r\\n                                <div class=\\\"icon\\\" [ngStyle]=\\\"{'background-image': 'url(/assets/login/password.png)'}\\\"></div>\\r\\n                                <div class=\\\"text\\\">\\r\\n                                    Senha\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"tag\\\">\\r\\n                        <div class=\\\"button\\\" [class.active]=\\\"inputType=='biometry'\\\" (click)=\\\"inputType='biometry'\\\">\\r\\n                            <div class=\\\"img\\\">\\r\\n                                <div class=\\\"icon\\\" [ngStyle]=\\\"{'background-image': 'url(/assets/login/finger.png)'}\\\"></div>\\r\\n                                <div class=\\\"text\\\">\\r\\n                                    Biometria\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"tag\\\">\\r\\n                        <div class=\\\"button\\\" [class.active]=\\\"inputType=='credential'\\\" (click)=\\\"inputType='credential'\\\">\\r\\n                            <div class=\\\"img\\\">\\r\\n                                <div class=\\\"icon\\\" [ngStyle]=\\\"{'background-image': 'url(/assets/login/credential.png)'}\\\"></div>\\r\\n                                <div class=\\\"text\\\">\\r\\n                                    Credencial\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div> -->\\r\\n                    <div class=\\\"tag\\\"></div>\\r\\n                    <div class=\\\"tag\\\"></div>\\r\\n                    <div class=\\\"tag\\\"></div>\\r\\n                    <!-- <div class=\\\"tag\\\"></div> -->\\r\\n                </div>\\r\\n                <div id=\\\"center\\\">\\r\\n                    <!-- class=\\\"logo\\\" -->\\r\\n                    <!-- <img class=\\\"logo\\\" src=\\\"assets/rcr/logo_login.png\\\"> -->\\r\\n                    <div id=\\\"image\\\">\\r\\n                        <!-- <div class=\\\"circle\\\"> -->\\r\\n                        <!-- <div class=\\\"photo\\\"> -->\\r\\n                            <!-- </div> -->\\r\\n                        <div>    \\r\\n                            <img class=\\\"logo\\\" src=\\\"assets/rcr/logo_login.png\\\">\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"send()\\\">\\r\\n                        <!-- <div class=\\\"idCompany\\\">\\r\\n                            <mat-form-field id=\\\"idCompany\\\">\\r\\n                                <mat-select placeholder=\\\"Selecione a Empresa\\\" formControlName=\\\"idCompany\\\" required>\\r\\n                                    <mat-option *ngFor=\\\"let company of companies\\\" [value]=\\\"company.idCompany\\\">\\r\\n                                        {{company.name}}\\r\\n                                    </mat-option>\\r\\n                                </mat-select>\\r\\n                            </mat-form-field>\\r\\n                        </div> -->\\r\\n                        <div class=\\\"enroll\\\">\\r\\n                            <mat-form-field id=\\\"enroll\\\">\\r\\n                                <input matInput placeholder=\\\"Email\\\" formControlName=\\\"enroll\\\">\\r\\n                                <!--  [formGroup]=\\\"form\\\" [formControl]=\\\"user\\\" -->\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <div class=\\\"password\\\">\\r\\n                            <mat-form-field id=\\\"password\\\">\\r\\n                                <input matInput placeholder=\\\"Senha\\\" type=\\\"password\\\" formControlName=\\\"password\\\">\\r\\n                                <!--  [formGroup]=\\\"form\\\" [formControl]=\\\"user\\\" -->\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <!-- <div id=\\\"problem\\\"> -->\\r\\n                            <!-- <span class=\\\"problem\\\" color=\\\"primary\\\">Problemas para Entrar?</span> -->\\r\\n                        <!-- </div> -->\\r\\n                        <div id=\\\"btn-login\\\" *ngIf=\\\"inputType=='password'\\\">\\r\\n                            <!-- <button mat-raised-button *ngIf=\\\"!visible\\\" [disabled]=\\\"!form.valid\\\" class=\\\"btn-rounded btn-login\\\"\\r\\n                                color=\\\"primary\\\">Login</button> -->\\r\\n                            <button mat-raised-button *ngIf=\\\"!visible\\\" class=\\\"btn-rounded btn-login\\\"\\r\\n                                color=\\\"primary\\\">Entrar</button>\\r\\n\\r\\n                            <mat-spinner *ngIf=\\\"visible\\\"></mat-spinner>\\r\\n                        </div>\\r\\n                        <div class=\\\"enroll\\\">\\r\\n                            <p class=\\\"extra\\\">\\r\\n                                <!-- Don't have an account?<br/> -->\\r\\n                                <a [routerLink]=\\\"['/register']\\\">Criar nova conta</a>\\r\\n                            </p>\\r\\n                        </div>\\r\\n                        <div id=\\\"btn-login\\\" *ngIf=\\\"inputType=='biometry'\\\">\\r\\n                            <div class=\\\"img\\\">\\r\\n                                <div class=\\\"icon\\\" [ngStyle]=\\\"{'background-image': 'url(/assets/login/finger5.png)'}\\\"></div>\\r\\n                                <div class=\\\"text\\\">\\r\\n                                    Biometria\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <mat-spinner *ngIf=\\\"visible\\\"></mat-spinner>\\r\\n                        </div>\\r\\n                        <div id=\\\"btn-login\\\" *ngIf=\\\"inputType=='credential'\\\">\\r\\n                            <div class=\\\"img\\\">\\r\\n                                <div class=\\\"icon\\\" [ngStyle]=\\\"{'background-image': 'url(/assets/login/credential5.png)'}\\\"></div>\\r\\n                                <div class=\\\"text\\\">\\r\\n                                    Credencial\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <mat-spinner *ngIf=\\\"visible\\\"></mat-spinner>\\r\\n                        </div>\\r\\n                    </form>\\r\\n                </div>\\r\\n                <div id=\\\"right\\\">\\r\\n                    <!-- Right -->\\r\\n                </div>\\r\\n\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div id=\\\"dateFooter\\\" style=\\\"color: #3F4ADE\\\">\\r\\n        {{ dateFooter }}\\r\\n    </div>\\r\\n</div>\"","module.exports = \"html,\\nbody {\\n  height: 100%;\\n  margin: 0px;\\n  align-items: center; }\\n\\n.background {\\n  height: 100%;\\n  flex-direction: column;\\n  box-sizing: border-box;\\n  display: flex;\\n  justify-content: center;\\n  align-content: center;\\n  align-items: center;\\n  max-width: 100%;\\n  background-image: url(/assets/rcr/mapa2@2x.png);\\n  background-size: cover; }\\n\\n.background #login {\\n    display: flex;\\n    flex-direction: column;\\n    flex-wrap: nowrap;\\n    justify-content: stretch;\\n    align-items: stretch;\\n    align-content: stretch;\\n    height: 61.76%;\\n    width: 64.41%; }\\n\\n.background #login #card {\\n      flex: 1 1 auto;\\n      display: flex;\\n      flex-wrap: wrap;\\n      box-shadow: 0 60px 80px rgba(0, 0, 0, 0.3);\\n      background-color: rgba(255, 255, 255, 0.95);\\n      border-top-left-radius: 20px;\\n      border-bottom-left-radius: 20px;\\n      border-top-right-radius: 13px;\\n      border-bottom-right-radius: 13px; }\\n\\n.background #login #card #logo {\\n        background-image: url(/assets/rcr/img-bg@2x.png);\\n        background-size: cover;\\n        background-position: left;\\n        background-color: #3F4ADE;\\n        flex: 1 0 40.77%;\\n        display: flex;\\n        flex-direction: column;\\n        border-top-left-radius: 13px;\\n        border-bottom-left-radius: 13px;\\n        box-shadow: 5px 10px 60px rgba(0, 0, 0, 0.2); }\\n\\n.background #login #card #logo #title {\\n          flex: 1 1 50%;\\n          align-content: flex-end;\\n          justify-content: center;\\n          align-items: flex-end;\\n          display: flex;\\n          min-height: 64px; }\\n\\n.background #login #card #logo #title .text {\\n            font-size: 350%;\\n            font-weight: 500;\\n            color: rgba(255, 255, 255, 0.8); }\\n\\n.background #login #card #logo #subtitle {\\n          flex: 1 1 50%;\\n          align-content: flex-start;\\n          justify-content: center;\\n          align-items: flex-start;\\n          text-align: center;\\n          display: flex; }\\n\\n.background #login #card #logo #subtitle .text {\\n            font-size: 90%;\\n            font-weight: lighter;\\n            color: rgba(255, 255, 255, 0.8); }\\n\\n.background #login #card #conteiner {\\n        flex: 1 1 auto;\\n        flex-direction: row;\\n        box-sizing: border-box;\\n        display: flex;\\n        min-height: 292px; }\\n\\n.background #login #card #conteiner #left {\\n          max-width: 25%;\\n          flex: 1 1 auto;\\n          display: flex;\\n          flex-direction: column; }\\n\\n.background #login #card #conteiner #left .tag {\\n            flex: 1 1 auto;\\n            border: 2px unset solid;\\n            width: 100%;\\n            height: 100%;\\n            margin-top: 10px; }\\n\\n.background #login #card #conteiner #left .tag .button {\\n              width: 53%;\\n              height: 100%;\\n              border: 1px #95989A solid;\\n              border-top-right-radius: 13px;\\n              border-bottom-right-radius: 13px;\\n              box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2);\\n              -webkit-filter: opacity(50%);\\n                      filter: opacity(50%); }\\n\\n.background #login #card #conteiner #left .tag .button .img {\\n                height: 100%;\\n                justify-content: center;\\n                display: flex;\\n                align-items: center;\\n                flex-direction: column; }\\n\\n.background #login #card #conteiner #left .tag .button .img .icon {\\n                  width: 58px;\\n                  height: 58px;\\n                  background-size: cover; }\\n\\n.background #login #card #conteiner #left .tag .button .img .text {\\n                  color: #273B56;\\n                  font-size: 12px; }\\n\\n.background #login #card #conteiner #left .tag .active {\\n              width: 64%;\\n              border: 1px #273B56 solid;\\n              -webkit-filter: opacity(100%);\\n                      filter: opacity(100%); }\\n\\n.background #login #card #conteiner #center {\\n          max-width: 100%;\\n          flex: 1 1 auto;\\n          flex-direction: column;\\n          display: flex; }\\n\\n.background #login #card #conteiner #center #image {\\n            flex: 1 1 auto;\\n            box-sizing: border-box;\\n            max-height: 33.58%;\\n            justify-content: center;\\n            align-content: center;\\n            align-items: center;\\n            display: flex; }\\n\\n.background #login #card #conteiner #center #image .photo {\\n              min-width: 235px;\\n              min-height: 90px;\\n              background-size: cover;\\n              width: auto;\\n              height: auto;\\n              z-index: 5;\\n              position: relative; }\\n\\n.background #login #card #conteiner #center form {\\n            display: contents; }\\n\\n.background #login #card #conteiner #center form .idCompany {\\n              flex: 1 1 100%;\\n              box-sizing: border-box;\\n              max-height: 10.35%;\\n              justify-content: center;\\n              align-content: center;\\n              align-items: center;\\n              display: flex; }\\n\\n.background #login #card #conteiner #center form .idCompany #idCompany {\\n                flex: 1 1 auto; }\\n\\n.background #login #card #conteiner #center form .enroll {\\n              flex: 1 1 100%;\\n              box-sizing: border-box;\\n              max-height: 10.35%;\\n              justify-content: center;\\n              align-content: center;\\n              align-items: center;\\n              display: flex; }\\n\\n.background #login #card #conteiner #center form .enroll #enroll {\\n                flex: 1 1 auto; }\\n\\n.background #login #card #conteiner #center form .password {\\n              flex: 1 1 auto;\\n              box-sizing: border-box;\\n              max-height: 10.35%;\\n              justify-content: center;\\n              align-content: center;\\n              align-items: center;\\n              display: flex; }\\n\\n.background #login #card #conteiner #center form .password #password {\\n                flex: 1 1 auto; }\\n\\n.background #login #card #conteiner #center form #problem {\\n              flex: 1 1 auto;\\n              box-sizing: border-box;\\n              max-height: 10.77%;\\n              justify-content: flex-end;\\n              align-content: center;\\n              align-items: flex-end;\\n              display: flex; }\\n\\n.background #login #card #conteiner #center form #problem .problem {\\n                font-size: 66%;\\n                opacity: 0.8; }\\n\\n.background #login #card #conteiner #center form #btn-login {\\n              flex: 1 1 auto;\\n              box-sizing: border-box;\\n              max-height: 34.95%;\\n              justify-content: center;\\n              align-content: center;\\n              align-items: center;\\n              display: flex; }\\n\\n.background #login #card #conteiner #center form #btn-login .btn-login {\\n                flex: .82 1 0%;\\n                box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);\\n                font-size: 150%;\\n                font-weight: lighter;\\n                background: #F8AD2F; }\\n\\n.background #login #card #conteiner #center form #btn-login .img {\\n                height: 100%;\\n                justify-content: center;\\n                display: flex;\\n                align-items: center;\\n                flex-direction: column; }\\n\\n.background #login #card #conteiner #center form #btn-login .img .icon {\\n                  width: 150px;\\n                  height: 150px;\\n                  background-size: cover; }\\n\\n.background #login #card #conteiner #center form #btn-login .img .text {\\n                  color: #273B56; }\\n\\n.background #login #card #conteiner #right {\\n          max-width: 25%;\\n          flex: 1 1 auto; }\\n\\n.background #dateFooter {\\n    position: relative;\\n    bottom: -11%;\\n    font-size: 115%;\\n    font-weight: 100;\\n    color: rgba(255, 255, 255, 0.5); }\\n\\n@media only screen and (max-width: 600px) {\\n  #login {\\n    height: 100% !important;\\n    width: 100% !important; }\\n    #login #card {\\n      border-radius: unset !important;\\n      flex-direction: column; }\\n      #login #card #logo {\\n        border-radius: unset !important; }\\n  #dateFooter {\\n    display: none !important; } }\\n\\n@media only screen and (max-height: 480px) {\\n  #login {\\n    height: 100% !important;\\n    width: 100% !important; }\\n    #login #card {\\n      border-radius: unset !important; }\\n      #login #card #logo {\\n        border-radius: unset !important; }\\n  #dateFooter {\\n    display: none !important; } }\\n\\n.blue-snackbar {\\n  background-color: #202020; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL21hcmN1cy5qdW5pb3IvRG9jdW1lbnRvcy9uZXdfcmNyL3NyYy9hcHAvY29yZS9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7RUFFRSxhQUFZO0VBQ1osWUFBVztFQUNYLG9CQUFtQixFQUNwQjs7QUFFRDtFQUNFLGFBQVk7RUFDWix1QkFBc0I7RUFDdEIsdUJBQXNCO0VBQ3RCLGNBQWE7RUFDYix3QkFBdUI7RUFDdkIsc0JBQXFCO0VBQ3JCLG9CQUFtQjtFQUNuQixnQkFBZTtFQUVmLGdEQUErQztFQUMvQyx1QkFBc0IsRUE2UHZCOztBQXhRRDtJQWNJLGNBQWE7SUFDYix1QkFBc0I7SUFDdEIsa0JBQWlCO0lBQ2pCLHlCQUF3QjtJQUN4QixxQkFBb0I7SUFDcEIsdUJBQXNCO0lBQ3RCLGVBQWM7SUFDZCxjQUFhLEVBMk9kOztBQWhRSDtNQXVCTSxlQUFjO01BQ2QsY0FBYTtNQUNiLGdCQUFlO01BQ2YsMkNBQTBDO01BQzFDLDRDQUEwQztNQUMxQyw2QkFBNEI7TUFDNUIsZ0NBQStCO01BQy9CLDhCQUE2QjtNQUM3QixpQ0FBZ0MsRUFnT2pDOztBQS9QTDtRQWlDUSxpREFBZ0Q7UUFDaEQsdUJBQXNCO1FBQ3RCLDBCQUF5QjtRQUV6QiwwQkFBd0I7UUFDeEIsaUJBQWdCO1FBQ2hCLGNBQWE7UUFDYix1QkFBc0I7UUFDdEIsNkJBQTRCO1FBQzVCLGdDQUErQjtRQUMvQiw2Q0FBNEMsRUEyQjdDOztBQXRFUDtVQTZDVSxjQUFhO1VBQ2Isd0JBQXVCO1VBQ3ZCLHdCQUF1QjtVQUN2QixzQkFBcUI7VUFDckIsY0FBYTtVQUNiLGlCQUFnQixFQU1qQjs7QUF4RFQ7WUFvRFksZ0JBQWU7WUFDZixpQkFBZ0I7WUFDaEIsZ0NBQW9CLEVBQ3JCOztBQXZEWDtVQTBEVSxjQUFhO1VBQ2IsMEJBQXlCO1VBQ3pCLHdCQUF1QjtVQUN2Qix3QkFBdUI7VUFDdkIsbUJBQWtCO1VBQ2xCLGNBQWEsRUFNZDs7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Q2hCLGdDQUFvQixFQUNyQjs7QUFHSDtFQUNFO0lBQ0Usd0JBQXVCO0lBQ3ZCLHVCQUFzQixFQVl2QjtJQWREO01BSUksZ0NBQStCO01BQy9CLHVCQUFzQixFQUl2QjtNQVRIO1FBT00sZ0NBQStCLEVBQ2hDO0VBT0w7SUFDRSx5QkFBd0IsRUFDekIsRUFBQTs7QUFFSDtFQUNFO0lBQ0Usd0JBQXVCO0lBQ3ZCLHVCQUFzQixFQVd2QjtJQWJEO01BSUksZ0NBQStCLEVBSWhDO01BUkg7UUFNTSxnQ0FBK0IsRUFDaEM7RUFPTDtJQUNFLHlCQUF3QixFQUN6QixFQUFBOztBQUdIO0VBQ0UsMEJBQXlCLEVBQzFCIiwiZmlsZSI6InNyYy9hcHAvY29yZS9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImh0bWwsXHJcbmJvZHkge1xyXG4gIGhlaWdodDogMTAwJTtcclxuICBtYXJnaW46IDBweDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG59XHJcblxyXG4uYmFja2dyb3VuZCB7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIG1heC13aWR0aDogMTAwJTtcclxuICAvL2JhY2tncm91bmQ6ICMzMzVENTM7XHJcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9hc3NldHMvcmNyL21hcGEyQDJ4LnBuZyk7XHJcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuXHJcbiAgI2xvZ2luIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgZmxleC13cmFwOiBub3dyYXA7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0cmV0Y2g7XHJcbiAgICBhbGlnbi1pdGVtczogc3RyZXRjaDtcclxuICAgIGFsaWduLWNvbnRlbnQ6IHN0cmV0Y2g7XHJcbiAgICBoZWlnaHQ6IDYxLjc2JTsgLy8gaGVpZ2h0OjUwLjYlOyAvLyB0byBjb21wYXJlIHdpdGggdGhlIGltYWdlIHByb3RvdHlwZVxyXG4gICAgd2lkdGg6IDY0LjQxJTtcclxuICAgICNjYXJkIHtcclxuICAgICAgZmxleDogMSAxIGF1dG87XHJcbiAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgIGZsZXgtd3JhcDogd3JhcDtcclxuICAgICAgYm94LXNoYWRvdzogMCA2MHB4IDgwcHggcmdiYSgwLCAwLCAwLCAwLjMpO1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIC45NSk7XHJcbiAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDIwcHg7IC8vIHRoaXMgdmFsdWUgaXMgdG8gaGlkZSBib3JkZXIgb2YgdGhlIGJhY2tncm91bmRcclxuICAgICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMjBweDsgLy8gdGhpcyB2YWx1ZSBpcyB0byBoaWRlIGJvcmRlciBvZiB0aGUgYmFja2dyb3VuZFxyXG4gICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMTNweDtcclxuICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDEzcHg7XHJcbiAgICAgICNsb2dvIHtcclxuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoL2Fzc2V0cy9yY3IvaW1nLWJnQDJ4LnBuZyk7XHJcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBsZWZ0O1xyXG4gICAgICAgIC8vYmFja2dyb3VuZC1jb2xvcjogIzI3M0I1NjtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiMzRjRBREU7XHJcbiAgICAgICAgZmxleDogMSAwIDQwLjc3JTtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMTNweDtcclxuICAgICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAxM3B4O1xyXG4gICAgICAgIGJveC1zaGFkb3c6IDVweCAxMHB4IDYwcHggcmdiYSgwLCAwLCAwLCAwLjIpOyAvLyAxMHB4IDBweCAtMjRweCByZ2JhKDAsMCwwLDAuMik7XHJcbiAgICAgICAgI3RpdGxlIHtcclxuICAgICAgICAgIGZsZXg6IDEgMSA1MCU7IC8vYmFja2dyb3VuZDogYmx1ZTtcclxuICAgICAgICAgIGFsaWduLWNvbnRlbnQ6IGZsZXgtZW5kO1xyXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1lbmQ7XHJcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgbWluLWhlaWdodDogNjRweDtcclxuICAgICAgICAgIC50ZXh0IHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAzNTAlO1xyXG4gICAgICAgICAgICBmb250LXdlaWdodDogNTAwO1xyXG4gICAgICAgICAgICBjb2xvcjogcmdiYSggI0ZGRkZGRiwgMC44KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgI3N1YnRpdGxlIHtcclxuICAgICAgICAgIGZsZXg6IDEgMSA1MCU7IC8vYmFja2dyb3VuZDogcmVkO1xyXG4gICAgICAgICAgYWxpZ24tY29udGVudDogZmxleC1zdGFydDtcclxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XHJcbiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgLnRleHQge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDkwJTtcclxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XHJcbiAgICAgICAgICAgIGNvbG9yOiByZ2JhKCAjRkZGRkZGLCAwLjgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAjY29udGVpbmVyIHtcclxuICAgICAgICAvLyBmbGV4OiAxIDEgNTkuMjMlO1xyXG4gICAgICAgIGZsZXg6IDEgMSBhdXRvO1xyXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIG1pbi1oZWlnaHQ6IDI5MnB4O1xyXG4gICAgICAgICNsZWZ0IHtcclxuICAgICAgICAgIC8vIGJhY2tncm91bmQ6IGdyZWVuO1xyXG4gICAgICAgICAgbWF4LXdpZHRoOiAyNSU7XHJcbiAgICAgICAgICBmbGV4OiAxIDEgYXV0bztcclxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICAgICAgLnRhZ3tcclxuICAgICAgICAgICAgZmxleDogMSAxIGF1dG87XHJcbiAgICAgICAgICAgIC8vIGJhY2tncm91bmQtY29sb3I6IHJlZDtcclxuICAgICAgICAgICAgYm9yZGVyOiAycHggdW5zZXQgc29saWQ7XHJcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgICAgICAgICAgIC5idXR0b257XHJcbiAgICAgICAgICAgICAgd2lkdGg6IDUzJTtcclxuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgICAgYm9yZGVyOiAxcHggIzk1OTg5QSBzb2xpZDsgIFxyXG4gICAgICAgICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAxM3B4OyAgICAgICBcclxuICAgICAgICAgICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMTNweDsgICBcclxuICAgICAgICAgICAgICBib3gtc2hhZG93OiAwIDNweCA2cHggcmdiYSgwLCAwLCAwLCAwLjIpOyBcclxuICAgICAgICAgICAgICBmaWx0ZXI6IG9wYWNpdHkoNTAlKTtcclxuICAgICAgICAgICAgICAuaW1ne1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC5pY29ue1xyXG4gICAgICAgICAgICAgICAgICB3aWR0aDogNThweDtcclxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA1OHB4OyBcclxuICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC50ZXh0e1xyXG4gICAgICAgICAgICAgICAgICBjb2xvcjogIzI3M0I1NjtcclxuICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0gICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAuYWN0aXZle1xyXG4gICAgICAgICAgICAgIHdpZHRoOiA2NCU7XHJcbiAgICAgICAgICAgICAgYm9yZGVyOiAxcHggIzI3M0I1NiBzb2xpZDtcclxuICAgICAgICAgICAgICBmaWx0ZXI6IG9wYWNpdHkoMTAwJSk7XHJcbiAgICAgICAgICAgICAgLy8gb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgIFxyXG4gICAgICAgICAgI2NlbnRlciB7XHJcbiAgICAgICAgICAgIC8vIGJhY2tncm91bmQ6IHllbGxvdztcclxuICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICBmbGV4OiAxIDEgYXV0bztcclxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgI2ltYWdlIHtcclxuICAgICAgICAgICAgICAvL2JhY2tncm91bmQtY29sb3I6IGdyYXk7XHJcbiAgICAgICAgICAgICAgZmxleDogMSAxIGF1dG87XHJcbiAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgICAgICAgICAgICBtYXgtaGVpZ2h0OiAzMy41OCU7XHJcbiAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgYWxpZ24tY29udGVudDogY2VudGVyO1xyXG4gICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgICAvLyAuY2lyY2xlIHtcclxuICAgICAgICAgICAgICAgIC5waG90byB7XHJcbiAgICAgICAgICAgICAgICAgIG1pbi13aWR0aDogMjM1cHg7XHJcbiAgICAgICAgICAgICAgICAgIG1pbi1oZWlnaHQ6IDkwcHg7XHJcbiAgICAgICAgICAgICAgICAgIC8vYmFja2dyb3VuZC1pbWFnZTogdXJsKC9hc3NldHMvcmNyL2xvZ29fbG9naW4ucG5nKTtcclxuICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuICAgICAgICAgICAgICAgICAgd2lkdGg6IGF1dG87XHJcbiAgICAgICAgICAgICAgICAgIGhlaWdodDogYXV0bztcclxuICAgICAgICAgICAgICAgICAgLy8gYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgICAgICAgICAgICAgICAvLyBib3JkZXI6IDNweCBzb2xpZCAjMjYzQjU1O1xyXG4gICAgICAgICAgICAgICAgICB6LWluZGV4OiA1OyAvLyBiYWNrZ3JvdW5kOiAjRkZGO1xyXG4gICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvcm0ge1xyXG4gICAgICAgICAgICAgIGRpc3BsYXk6IGNvbnRlbnRzO1xyXG4gICAgICAgICAgICAgIC5pZENvbXBhbnkge1xyXG4gICAgICAgICAgICAgICAgLy9iYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxuICAgICAgICAgICAgICAgIGZsZXg6IDEgMSAxMDAlO1xyXG4gICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDEwLjM1JTtcclxuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgYWxpZ24tY29udGVudDogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgICAgICAjaWRDb21wYW55IHtcclxuICAgICAgICAgICAgICAgICAgZmxleDogMSAxIGF1dG87IC8vIGZsZXg6IDwnZmxleC1ncm93Jz4gPCdmbGV4LXNocmluayc+IDwnZmxleC1iYXNpcyc+IFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLmVucm9sbCB7XHJcbiAgICAgICAgICAgICAgLy9iYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxuICAgICAgICAgICAgICBmbGV4OiAxIDEgMTAwJTtcclxuICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDEwLjM1JTtcclxuICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICAgICAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgICNlbnJvbGwge1xyXG4gICAgICAgICAgICAgICAgZmxleDogMSAxIGF1dG87IC8vIGZsZXg6IDwnZmxleC1ncm93Jz4gPCdmbGV4LXNocmluayc+IDwnZmxleC1iYXNpcyc+IFxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAucGFzc3dvcmQge1xyXG4gICAgICAgICAgICAgIC8vYmFja2dyb3VuZC1jb2xvcjogZ3JheTtcclxuICAgICAgICAgICAgICBmbGV4OiAxIDEgYXV0bztcclxuICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDEwLjM1JTtcclxuICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICAgICAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgICNwYXNzd29yZCB7XHJcbiAgICAgICAgICAgICAgICBmbGV4OiAxIDEgYXV0bztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgI3Byb2JsZW0ge1xyXG4gICAgICAgICAgICAgIC8vYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgICAgICAgICAgICAgZmxleDogMSAxIGF1dG87XHJcbiAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgICAgICAgICAgICBtYXgtaGVpZ2h0OiAxMC43NyU7XHJcbiAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcclxuICAgICAgICAgICAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xyXG4gICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgICAgLnByb2JsZW0ge1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiA2NiU7XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjg7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICNidG4tbG9naW4ge1xyXG4gICAgICAgICAgICAgIC8vYmFja2dyb3VuZC1jb2xvcjogZ3JheTtcclxuICAgICAgICAgICAgICBmbGV4OiAxIDEgYXV0bztcclxuICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDM0Ljk1JTtcclxuICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICAgICAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgIC5idG4tbG9naW4ge1xyXG4gICAgICAgICAgICAgICAgZmxleDogLjgyIDEgMCU7XHJcbiAgICAgICAgICAgICAgICBib3gtc2hhZG93OiAwIDE1cHggMzBweCByZ2JhKDAsIDAsIDAsIDAuMik7XHJcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE1MCU7XHJcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogbGlnaHRlcjtcclxuICAgICAgICAgICAgICAgIC8vY29sb3I6ICNGOEFEMkZcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICNGOEFEMkY7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuaW1ne1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAuaWNvbntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxNTBweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTUwcHg7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLnRleHR7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogIzI3M0I1NjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvbnQtc2l6ZTogMTJweDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgXHJcbiAgICAgICAgI3JpZ2h0IHtcclxuICAgICAgICAgIC8vIGJhY2tncm91bmQ6IHB1cnBsZTtcclxuICAgICAgICAgIG1heC13aWR0aDogMjUlO1xyXG4gICAgICAgICAgZmxleDogMSAxIGF1dG87XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gICNkYXRlRm9vdGVyIHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIGJvdHRvbTogLTExJTtcclxuICAgIGZvbnQtc2l6ZTogMTE1JTtcclxuICAgIGZvbnQtd2VpZ2h0OiAxMDA7XHJcbiAgICBjb2xvcjogcmdiYSggI0ZGRkZGRiwgMC41KVxyXG4gIH1cclxufVxyXG5cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2MDBweCkge1xyXG4gICNsb2dpbiB7XHJcbiAgICBoZWlnaHQ6IDEwMCUgIWltcG9ydGFudDtcclxuICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XHJcbiAgICAjY2FyZCB7XHJcbiAgICAgIGJvcmRlci1yYWRpdXM6IHVuc2V0ICFpbXBvcnRhbnQ7XHJcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICAgICNsb2dvIHtcclxuICAgICAgICBib3JkZXItcmFkaXVzOiB1bnNldCAhaW1wb3J0YW50O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyAucGhvdG8ge1xyXG4gICAgLy8gICBtaW4td2lkdGg6IDEwMHB4ICFpbXBvcnRhbnQ7XHJcbiAgICAvLyAgIG1pbi1oZWlnaHQ6IDEwMHB4ICFpbXBvcnRhbnQ7XHJcbiAgICAvLyB9XHJcbiAgfVxyXG4gICNkYXRlRm9vdGVyIHtcclxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcclxuICB9XHJcbn1cclxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LWhlaWdodDogNDgwcHgpIHtcclxuICAjbG9naW4ge1xyXG4gICAgaGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7XHJcbiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG4gICAgI2NhcmQge1xyXG4gICAgICBib3JkZXItcmFkaXVzOiB1bnNldCAhaW1wb3J0YW50O1xyXG4gICAgICAjbG9nbyB7XHJcbiAgICAgICAgYm9yZGVyLXJhZGl1czogdW5zZXQgIWltcG9ydGFudDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gLnBob3RvIHtcclxuICAgIC8vICAgbWluLXdpZHRoOiAxMDBweCAhaW1wb3J0YW50O1xyXG4gICAgLy8gICBtaW4taGVpZ2h0OiAxMDBweCAhaW1wb3J0YW50O1xyXG4gICAgLy8gfVxyXG4gIH1cclxuICAjZGF0ZUZvb3RlciB7XHJcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XHJcbiAgfVxyXG59XHJcblxyXG4uYmx1ZS1zbmFja2JhciB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIwMjAyMDtcclxufSJdfQ== */\"","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { LoginService } from './login.service';\r\n// import { SessionStoreService } from '../../../module/store/session/session-store.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { Utils } from 'app/utils/utils';\r\nimport { fadeOutAnimation } from '../common/route.animation';\r\nimport { MatSnackBar } from '@angular/material';\r\nimport { CompanyControllerService, CompanyDTO } from 'app/module/performa';\r\nimport { ToolbarUserButtonComponent } from '../toolbar/toolbar-user-button/toolbar-user-button.component';\r\nimport { SessionService } from 'app/service/session.service';\r\n//import { CookieService } from 'ngx-cookie-service;\r\n\r\n\r\n@Component({\r\n  selector: 'fury-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n  animations: [fadeOutAnimation],\r\n  providers: [SessionService]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n\r\n  inputType = 'password';\r\n  visible = false;\r\n  public sessionSub: Subscription;\r\n  photoUrl: string;\r\n  companies: CompanyDTO[] = [];\r\n  selectedCompanyId = 1;\r\n  \r\n  //toolbarUserButton;\r\n  \r\n  constructor(private router: Router,\r\n    private fb: FormBuilder,\r\n    private cd: ChangeDetectorRef,\r\n    private login: LoginService,\r\n    private companyPerformaApi: CompanyControllerService,\r\n    // private companyService: CompanyService,\r\n    public snackBar: MatSnackBar,\r\n    public session: SessionService,\r\n    // private sessionStore: SessionStoreService,\r\n  ) { \r\n    localStorage.clear();\r\n    //this.toolbarUserButton = ToolbarUserButtonComponent;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      idCompany: ['', Validators.required],\r\n      enroll: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n    });\r\n    localStorage.clear();\r\n    //this.loadData();\r\n  }\r\n\r\n  send() {\r\n    this.visible = true;\r\n    this.login.login(this.form.get('enroll').value, this.form.get('password').value).then(\r\n      success => {\r\n        //this.session.loadUser();\r\n        this.router.navigate(['/dashboard-lives']);\r\n        //console.log(success);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        this.visible = false;\r\n        this.snackBar.open('Usuário Inválido!','OK',{\r\n          duration: 30000,\r\n          panelClass: ['blue-snackbar']\r\n        });\r\n      }\r\n    );\r\n    //this.visible = false;\r\n  }\r\n\r\n  show() {\r\n    this.inputType = 'text';\r\n    this.visible = true;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  hide() {\r\n    this.inputType = 'password';\r\n    this.visible = false;\r\n    this.cd.markForCheck();\r\n    this.send();\r\n  }\r\n\r\n  public loadData(): void {\r\n    //this.getCompanies();\r\n    // this.sessionSub = this.sessionStore.getSession$().subscribe(res => {\r\n    // console.log(res);\r\n    // this.user = res.user;\r\n    // this.isExpiredSession = res.isExpiredSession;\r\n    // this.hasError = res.error;\r\n    // });\r\n  }\r\n\r\n  get dateFooter(): string {\r\n    const date = new Date().toLocaleDateString('en-GB');\r\n    // Date formatting for footer\r\n    const d = date.split('/');\r\n    const m = Utils.mesPorExtenso(d[1]);\r\n    return d[0] + ' de ' + m.charAt(0).toUpperCase() + m.substr(1) + ' de ' + d[2];\r\n\r\n  }\r\n\r\n  getCompanies() {\r\n    this.companyPerformaApi.getAllUsingGET1(0).subscribe(\r\n      data => {\r\n        // console.log(data)\r\n        this.companies = data.content;\r\n        // this.selectCompanyTransire();\r\n      },\r\n      error => {\r\n        if (error.status === 0 || error.status === 404) {\r\n          //this.snackBar.open('Esse serviço está indisponível no momento.', 'OK', {});\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { LoginRoutingModule } from './login-routing.module';\r\nimport { LoginComponent } from './login.component';\r\nimport { LoginService } from './login.service';\r\nimport { MaterialModule } from '../common/material-components.module';\r\nimport { BASE_PATH, CompanyControllerService } from 'app/module/performa';\r\nimport { environment } from 'environments/environment';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    LoginRoutingModule,\r\n    MaterialModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: [LoginComponent],\r\n  providers: [LoginService,\r\n    { provide: BASE_PATH, useValue: environment.origin.performaApi },\r\n    CompanyControllerService\r\n  ],\r\n\r\n})\r\nexport class LoginModule {\r\n}\r\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { Configuration } from './configuration';\n\nimport { AreasControllerService } from './api/areasController.service';\nimport { CompanyControllerService } from './api/companyController.service';\nimport { DatabasesControllerService } from './api/databasesController.service';\nimport { DefectClassControllerService } from './api/defectClassController.service';\nimport { DefectsControllerService } from './api/defectsController.service';\nimport { DepartmentsControllerService } from './api/departmentsController.service';\nimport { DowntimeDetailControllerService } from './api/downtimeDetailController.service';\nimport { DowntimeHeaderControllerService } from './api/downtimeHeaderController.service';\nimport { DowntimeReasonControllerService } from './api/downtimeReasonController.service';\nimport { DowntimeTypeReasonControllerService } from './api/downtimeTypeReasonController.service';\nimport { EmployeesControllerService } from './api/employeesController.service';\nimport { LinesControllerService } from './api/linesController.service';\nimport { MachinesControllerService } from './api/machinesController.service';\nimport { MaintenanceActionControllerService } from './api/maintenanceActionController.service';\nimport { ModelsControllerService } from './api/modelsController.service';\nimport { ModulesControllerService } from './api/modulesController.service';\nimport { MovementHeadersControllerService } from './api/movementHeadersController.service';\nimport { MovementHistoriesControllerService } from './api/movementHistoriesController.service';\nimport { PositionControllerService } from './api/positionController.service';\nimport { ProductionOrdersControllerService } from './api/productionOrdersController.service';\nimport { ProfilesControllerService } from './api/profilesController.service';\nimport { RoutesControllerService } from './api/routesController.service';\nimport { SessionsControllerService } from './api/sessionsController.service';\nimport { ShiftsControllerService } from './api/shiftsController.service';\nimport { TechnicalActionsControllerService } from './api/technicalActionsController.service';\nimport { TechnicalAnalysisControllerService } from './api/technicalAnalysisController.service';\nimport { WorkstationsControllerService } from './api/workstationsController.service';\n\n@NgModule({\n  imports:      [ CommonModule, HttpClientModule ],\n  declarations: [],\n  exports:      [],\n  providers: [\n    AreasControllerService,\n    CompanyControllerService,\n    DatabasesControllerService,\n    DefectClassControllerService,\n    DefectsControllerService,\n    DepartmentsControllerService,\n    DowntimeDetailControllerService,\n    DowntimeHeaderControllerService,\n    DowntimeReasonControllerService,\n    DowntimeTypeReasonControllerService,\n    EmployeesControllerService,\n    LinesControllerService,\n    MachinesControllerService,\n    MaintenanceActionControllerService,\n    ModelsControllerService,\n    ModulesControllerService,\n    MovementHeadersControllerService,\n    MovementHistoriesControllerService,\n    PositionControllerService,\n    ProductionOrdersControllerService,\n    ProfilesControllerService,\n    RoutesControllerService,\n    SessionsControllerService,\n    ShiftsControllerService,\n    TechnicalActionsControllerService,\n    TechnicalAnalysisControllerService,\n    WorkstationsControllerService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        }\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import your base AppModule only.');\n        }\n    }\n}\n","export * from './areasController.service';\nimport { AreasControllerService } from './areasController.service';\nexport * from './companyController.service';\nimport { CompanyControllerService } from './companyController.service';\nexport * from './databasesController.service';\nimport { DatabasesControllerService } from './databasesController.service';\nexport * from './defectClassController.service';\nimport { DefectClassControllerService } from './defectClassController.service';\nexport * from './defectsController.service';\nimport { DefectsControllerService } from './defectsController.service';\nexport * from './departmentsController.service';\nimport { DepartmentsControllerService } from './departmentsController.service';\nexport * from './downtimeDetailController.service';\nimport { DowntimeDetailControllerService } from './downtimeDetailController.service';\nexport * from './downtimeHeaderController.service';\nimport { DowntimeHeaderControllerService } from './downtimeHeaderController.service';\nexport * from './downtimeReasonController.service';\nimport { DowntimeReasonControllerService } from './downtimeReasonController.service';\nexport * from './downtimeTypeReasonController.service';\nimport { DowntimeTypeReasonControllerService } from './downtimeTypeReasonController.service';\nexport * from './employeesController.service';\nimport { EmployeesControllerService } from './employeesController.service';\nexport * from './linesController.service';\nimport { LinesControllerService } from './linesController.service';\nexport * from './machinesController.service';\nimport { MachinesControllerService } from './machinesController.service';\nexport * from './maintenanceActionController.service';\nimport { MaintenanceActionControllerService } from './maintenanceActionController.service';\nexport * from './modelsController.service';\nimport { ModelsControllerService } from './modelsController.service';\nexport * from './modulesController.service';\nimport { ModulesControllerService } from './modulesController.service';\nexport * from './movementHeadersController.service';\nimport { MovementHeadersControllerService } from './movementHeadersController.service';\nexport * from './movementHistoriesController.service';\nimport { MovementHistoriesControllerService } from './movementHistoriesController.service';\nexport * from './positionController.service';\nimport { PositionControllerService } from './positionController.service';\nexport * from './productionOrdersController.service';\nimport { ProductionOrdersControllerService } from './productionOrdersController.service';\nexport * from './profilesController.service';\nimport { ProfilesControllerService } from './profilesController.service';\nexport * from './routesController.service';\nimport { RoutesControllerService } from './routesController.service';\nexport * from './sessionsController.service';\nimport { SessionsControllerService } from './sessionsController.service';\nexport * from './shiftsController.service';\nimport { ShiftsControllerService } from './shiftsController.service';\nexport * from './technicalActionsController.service';\nimport { TechnicalActionsControllerService } from './technicalActionsController.service';\nexport * from './technicalAnalysisController.service';\nimport { TechnicalAnalysisControllerService } from './technicalAnalysisController.service';\nexport * from './workstationsController.service';\nimport { WorkstationsControllerService } from './workstationsController.service';\nexport const APIS = [AreasControllerService, CompanyControllerService, DatabasesControllerService, DefectClassControllerService, DefectsControllerService, DepartmentsControllerService, DowntimeDetailControllerService, DowntimeHeaderControllerService, DowntimeReasonControllerService, DowntimeTypeReasonControllerService, EmployeesControllerService, LinesControllerService, MachinesControllerService, MaintenanceActionControllerService, ModelsControllerService, ModulesControllerService, MovementHeadersControllerService, MovementHistoriesControllerService, PositionControllerService, ProductionOrdersControllerService, ProfilesControllerService, RoutesControllerService, SessionsControllerService, ShiftsControllerService, TechnicalActionsControllerService, TechnicalAnalysisControllerService, WorkstationsControllerService];\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { AreaDTO } from '../model/areaDTO';\nimport { SliceAreaDTO } from '../model/sliceAreaDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class AreasControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new Area\n     * \n     * @param areaDTO Area\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST(areaDTO: AreaDTO, observe?: 'body', reportProgress?: boolean): Observable<AreaDTO>;\n    public createUsingPOST(areaDTO: AreaDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AreaDTO>>;\n    public createUsingPOST(areaDTO: AreaDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AreaDTO>>;\n    public createUsingPOST(areaDTO: AreaDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (areaDTO === null || areaDTO === undefined) {\n            throw new Error('Required parameter areaDTO was null or undefined when calling createUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<AreaDTO>(`${this.basePath}/areas`,\n            areaDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete Area\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/areas/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find Area by id\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<AreaDTO>;\n    public findByIdUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AreaDTO>>;\n    public findByIdUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AreaDTO>>;\n    public findByIdUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<AreaDTO>(`${this.basePath}/areas/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all\n     * \n     * @param page \n     * @param count \n     * @param order \n     * @param sortProperty \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET(page: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceAreaDTO>;\n    public getAllUsingGET(page: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceAreaDTO>>;\n    public getAllUsingGET(page: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceAreaDTO>>;\n    public getAllUsingGET(page: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceAreaDTO>(`${this.basePath}/areas`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Area\n     * \n     * @param id id\n     * @param areaDTO Area\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT(id: number, areaDTO: AreaDTO, observe?: 'body', reportProgress?: boolean): Observable<AreaDTO>;\n    public updateUsingPUT(id: number, areaDTO: AreaDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AreaDTO>>;\n    public updateUsingPUT(id: number, areaDTO: AreaDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AreaDTO>>;\n    public updateUsingPUT(id: number, areaDTO: AreaDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT.');\n        }\n        if (areaDTO === null || areaDTO === undefined) {\n            throw new Error('Required parameter areaDTO was null or undefined when calling updateUsingPUT.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<AreaDTO>(`${this.basePath}/areas/${encodeURIComponent(String(id))}`,\n            areaDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { CompanyDTO } from '../model/companyDTO';\nimport { SliceCompanyDTO } from '../model/sliceCompanyDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class CompanyControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new company\n     * \n     * @param companyDTO company\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST1(companyDTO: CompanyDTO, observe?: 'body', reportProgress?: boolean): Observable<CompanyDTO>;\n    public createUsingPOST1(companyDTO: CompanyDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyDTO>>;\n    public createUsingPOST1(companyDTO: CompanyDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyDTO>>;\n    public createUsingPOST1(companyDTO: CompanyDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (companyDTO === null || companyDTO === undefined) {\n            throw new Error('Required parameter companyDTO was null or undefined when calling createUsingPOST1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<CompanyDTO>(`${this.basePath}/companies`,\n            companyDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete company\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/companies/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find company by id\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET1(id: number, observe?: 'body', reportProgress?: boolean): Observable<CompanyDTO>;\n    public findByIdUsingGET1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyDTO>>;\n    public findByIdUsingGET1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyDTO>>;\n    public findByIdUsingGET1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<CompanyDTO>(`${this.basePath}/companies/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all\n     * \n     * @param page \n     * @param count \n     * @param order \n     * @param sortProperty \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET1(page: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceCompanyDTO>;\n    public getAllUsingGET1(page: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceCompanyDTO>>;\n    public getAllUsingGET1(page: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceCompanyDTO>>;\n    public getAllUsingGET1(page: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET1.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceCompanyDTO>(`${this.basePath}/companies`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update company\n     * \n     * @param id id\n     * @param companyDTO company\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT1(id: number, companyDTO: CompanyDTO, observe?: 'body', reportProgress?: boolean): Observable<CompanyDTO>;\n    public updateUsingPUT1(id: number, companyDTO: CompanyDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompanyDTO>>;\n    public updateUsingPUT1(id: number, companyDTO: CompanyDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompanyDTO>>;\n    public updateUsingPUT1(id: number, companyDTO: CompanyDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT1.');\n        }\n        if (companyDTO === null || companyDTO === undefined) {\n            throw new Error('Required parameter companyDTO was null or undefined when calling updateUsingPUT1.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<CompanyDTO>(`${this.basePath}/companies/${encodeURIComponent(String(id))}`,\n            companyDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { DatabaseDTO } from '../model/databaseDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DatabasesControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Find database by id\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET2(id: number, observe?: 'body', reportProgress?: boolean): Observable<DatabaseDTO>;\n    public findByIdUsingGET2(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DatabaseDTO>>;\n    public findByIdUsingGET2(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DatabaseDTO>>;\n    public findByIdUsingGET2(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET2.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<DatabaseDTO>(`${this.basePath}/databases/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List of all databases\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET2(observe?: 'body', reportProgress?: boolean): Observable<Array<DatabaseDTO>>;\n    public getAllUsingGET2(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DatabaseDTO>>>;\n    public getAllUsingGET2(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DatabaseDTO>>>;\n    public getAllUsingGET2(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<DatabaseDTO>>(`${this.basePath}/databases`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { DefectClassDTO } from '../model/defectClassDTO';\nimport { SliceDefectClassDTO } from '../model/sliceDefectClassDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DefectClassControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new defect class\n     * \n     * @param defectClassDTO DefectClass\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST2(defectClassDTO: DefectClassDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<DefectClassDTO>;\n    public createUsingPOST2(defectClassDTO: DefectClassDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DefectClassDTO>>;\n    public createUsingPOST2(defectClassDTO: DefectClassDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DefectClassDTO>>;\n    public createUsingPOST2(defectClassDTO: DefectClassDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (defectClassDTO === null || defectClassDTO === undefined) {\n            throw new Error('Required parameter defectClassDTO was null or undefined when calling createUsingPOST2.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling createUsingPOST2.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<DefectClassDTO>(`${this.basePath}/defect-classes`,\n            defectClassDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete defect class\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE2(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE2(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE2(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE2(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE2.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling deleteUsingDELETE2.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/defect-classes/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find DefectClasses by id\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET3(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<DefectClassDTO>;\n    public findByIdUsingGET3(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DefectClassDTO>>;\n    public findByIdUsingGET3(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DefectClassDTO>>;\n    public findByIdUsingGET3(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET3.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling findByIdUsingGET3.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<DefectClassDTO>(`${this.basePath}/defect-classes/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all Defect Class\n     * \n     * @param idEmployee Employee Id\n     * @param page \n     * @param count \n     * @param order \n     * @param sortProperty \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET3(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceDefectClassDTO>;\n    public getAllUsingGET3(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceDefectClassDTO>>;\n    public getAllUsingGET3(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceDefectClassDTO>>;\n    public getAllUsingGET3(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getAllUsingGET3.');\n        }\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET3.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceDefectClassDTO>(`${this.basePath}/defect-classes`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update defect class\n     * \n     * @param id id\n     * @param defectClassDTO Area\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT2(id: number, defectClassDTO: DefectClassDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<DefectClassDTO>;\n    public updateUsingPUT2(id: number, defectClassDTO: DefectClassDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DefectClassDTO>>;\n    public updateUsingPUT2(id: number, defectClassDTO: DefectClassDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DefectClassDTO>>;\n    public updateUsingPUT2(id: number, defectClassDTO: DefectClassDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT2.');\n        }\n        if (defectClassDTO === null || defectClassDTO === undefined) {\n            throw new Error('Required parameter defectClassDTO was null or undefined when calling updateUsingPUT2.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling updateUsingPUT2.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<DefectClassDTO>(`${this.basePath}/defect-classes/${encodeURIComponent(String(id))}`,\n            defectClassDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { DefectDTO } from '../model/defectDTO';\nimport { SliceDefectDTO } from '../model/sliceDefectDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DefectsControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new defect\n     * \n     * @param defectDTO defect\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST3(defectDTO: DefectDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<DefectDTO>;\n    public createUsingPOST3(defectDTO: DefectDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DefectDTO>>;\n    public createUsingPOST3(defectDTO: DefectDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DefectDTO>>;\n    public createUsingPOST3(defectDTO: DefectDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (defectDTO === null || defectDTO === undefined) {\n            throw new Error('Required parameter defectDTO was null or undefined when calling createUsingPOST3.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling createUsingPOST3.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<DefectDTO>(`${this.basePath}/defects`,\n            defectDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete defect\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE3(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE3(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE3(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE3(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE3.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling deleteUsingDELETE3.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/defects/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find defect by id\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET4(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<DefectDTO>;\n    public findByIdUsingGET4(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DefectDTO>>;\n    public findByIdUsingGET4(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DefectDTO>>;\n    public findByIdUsingGET4(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET4.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling findByIdUsingGET4.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<DefectDTO>(`${this.basePath}/defects/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find defect by idMachine\n     * \n     * @param idMachine idMachine\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByMachineUsingGET(idMachine: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<Array<DefectDTO>>;\n    public findByMachineUsingGET(idMachine: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DefectDTO>>>;\n    public findByMachineUsingGET(idMachine: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DefectDTO>>>;\n    public findByMachineUsingGET(idMachine: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idMachine === null || idMachine === undefined) {\n            throw new Error('Required parameter idMachine was null or undefined when calling findByMachineUsingGET.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling findByMachineUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<DefectDTO>>(`${this.basePath}/defects/machines/${encodeURIComponent(String(idMachine))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all defects\n     * \n     * @param idEmployee Employee Id\n     * @param page \n     * @param count \n     * @param order \n     * @param sortProperty \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET4(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceDefectDTO>;\n    public getAllUsingGET4(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceDefectDTO>>;\n    public getAllUsingGET4(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceDefectDTO>>;\n    public getAllUsingGET4(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getAllUsingGET4.');\n        }\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET4.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceDefectDTO>(`${this.basePath}/defects`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Report defect\n     * \n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public reportUsingGET(idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public reportUsingGET(idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public reportUsingGET(idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public reportUsingGET(idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling reportUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<any>(`${this.basePath}/defects/report`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update defect\n     * \n     * @param id id\n     * @param defectDTO defect\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT3(id: number, defectDTO: DefectDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<DefectDTO>;\n    public updateUsingPUT3(id: number, defectDTO: DefectDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DefectDTO>>;\n    public updateUsingPUT3(id: number, defectDTO: DefectDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DefectDTO>>;\n    public updateUsingPUT3(id: number, defectDTO: DefectDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT3.');\n        }\n        if (defectDTO === null || defectDTO === undefined) {\n            throw new Error('Required parameter defectDTO was null or undefined when calling updateUsingPUT3.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling updateUsingPUT3.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<DefectDTO>(`${this.basePath}/defects/${encodeURIComponent(String(id))}`,\n            defectDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { DepartmentDTO } from '../model/departmentDTO';\nimport { SliceDepartmentDTO } from '../model/sliceDepartmentDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DepartmentsControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new Department\n     * \n     * @param departmentDTO Department\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST4(departmentDTO: DepartmentDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<DepartmentDTO>;\n    public createUsingPOST4(departmentDTO: DepartmentDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DepartmentDTO>>;\n    public createUsingPOST4(departmentDTO: DepartmentDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DepartmentDTO>>;\n    public createUsingPOST4(departmentDTO: DepartmentDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (departmentDTO === null || departmentDTO === undefined) {\n            throw new Error('Required parameter departmentDTO was null or undefined when calling createUsingPOST4.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling createUsingPOST4.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<DepartmentDTO>(`${this.basePath}/departments`,\n            departmentDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete Department\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE4(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE4(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE4(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE4(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE4.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling deleteUsingDELETE4.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/departments/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find Department by id\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET5(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<DepartmentDTO>;\n    public findByIdUsingGET5(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DepartmentDTO>>;\n    public findByIdUsingGET5(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DepartmentDTO>>;\n    public findByIdUsingGET5(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET5.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling findByIdUsingGET5.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<DepartmentDTO>(`${this.basePath}/departments/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all departments\n     * \n     * @param idEmployee Employee Id\n     * @param page \n     * @param count \n     * @param order \n     * @param sortProperty \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET5(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceDepartmentDTO>;\n    public getAllUsingGET5(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceDepartmentDTO>>;\n    public getAllUsingGET5(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceDepartmentDTO>>;\n    public getAllUsingGET5(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getAllUsingGET5.');\n        }\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET5.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceDepartmentDTO>(`${this.basePath}/departments`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Department\n     * \n     * @param id id\n     * @param departmentDTO Department\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT4(id: number, departmentDTO: DepartmentDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<DepartmentDTO>;\n    public updateUsingPUT4(id: number, departmentDTO: DepartmentDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DepartmentDTO>>;\n    public updateUsingPUT4(id: number, departmentDTO: DepartmentDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DepartmentDTO>>;\n    public updateUsingPUT4(id: number, departmentDTO: DepartmentDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT4.');\n        }\n        if (departmentDTO === null || departmentDTO === undefined) {\n            throw new Error('Required parameter departmentDTO was null or undefined when calling updateUsingPUT4.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling updateUsingPUT4.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<DepartmentDTO>(`${this.basePath}/departments/${encodeURIComponent(String(id))}`,\n            departmentDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { DowntimeDetailDTO } from '../model/downtimeDetailDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DowntimeDetailControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new downtime detail\n     * \n     * @param downtimeDetailDTO downtimedetail\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST5(downtimeDetailDTO: DowntimeDetailDTO, observe?: 'body', reportProgress?: boolean): Observable<DowntimeDetailDTO>;\n    public createUsingPOST5(downtimeDetailDTO: DowntimeDetailDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DowntimeDetailDTO>>;\n    public createUsingPOST5(downtimeDetailDTO: DowntimeDetailDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DowntimeDetailDTO>>;\n    public createUsingPOST5(downtimeDetailDTO: DowntimeDetailDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (downtimeDetailDTO === null || downtimeDetailDTO === undefined) {\n            throw new Error('Required parameter downtimeDetailDTO was null or undefined when calling createUsingPOST5.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<DowntimeDetailDTO>(`${this.basePath}/downtime-details`,\n            downtimeDetailDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete downtime detail\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE5(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE5(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE5(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE5(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE5.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/downtime-details/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find downtime detail by id\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET6(id: number, observe?: 'body', reportProgress?: boolean): Observable<DowntimeDetailDTO>;\n    public findByIdUsingGET6(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DowntimeDetailDTO>>;\n    public findByIdUsingGET6(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DowntimeDetailDTO>>;\n    public findByIdUsingGET6(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET6.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<DowntimeDetailDTO>(`${this.basePath}/downtime-details/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all downtime detail\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET6(observe?: 'body', reportProgress?: boolean): Observable<Array<DowntimeDetailDTO>>;\n    public getAllUsingGET6(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DowntimeDetailDTO>>>;\n    public getAllUsingGET6(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DowntimeDetailDTO>>>;\n    public getAllUsingGET6(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<DowntimeDetailDTO>>(`${this.basePath}/downtime-details`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update downtime detail\n     * \n     * @param id id\n     * @param downtimeDetailDTO downtimedetail\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT5(id: number, downtimeDetailDTO: DowntimeDetailDTO, observe?: 'body', reportProgress?: boolean): Observable<DowntimeDetailDTO>;\n    public updateUsingPUT5(id: number, downtimeDetailDTO: DowntimeDetailDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DowntimeDetailDTO>>;\n    public updateUsingPUT5(id: number, downtimeDetailDTO: DowntimeDetailDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DowntimeDetailDTO>>;\n    public updateUsingPUT5(id: number, downtimeDetailDTO: DowntimeDetailDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT5.');\n        }\n        if (downtimeDetailDTO === null || downtimeDetailDTO === undefined) {\n            throw new Error('Required parameter downtimeDetailDTO was null or undefined when calling updateUsingPUT5.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<DowntimeDetailDTO>(`${this.basePath}/downtime-details/${encodeURIComponent(String(id))}`,\n            downtimeDetailDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { DashboardDowntimeDTO } from '../model/dashboardDowntimeDTO';\nimport { DowntimeHeaderDTO } from '../model/downtimeHeaderDTO';\nimport { DowntimeHeaderDetailDTO } from '../model/downtimeHeaderDetailDTO';\nimport { SliceDowntimeHeaderDetailDTO } from '../model/sliceDowntimeHeaderDetailDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DowntimeHeaderControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new downtime header\n     * \n     * @param downtimeHeaderDTO downtimeheader\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST6(downtimeHeaderDTO: DowntimeHeaderDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<DowntimeHeaderDTO>;\n    public createUsingPOST6(downtimeHeaderDTO: DowntimeHeaderDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DowntimeHeaderDTO>>;\n    public createUsingPOST6(downtimeHeaderDTO: DowntimeHeaderDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DowntimeHeaderDTO>>;\n    public createUsingPOST6(downtimeHeaderDTO: DowntimeHeaderDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (downtimeHeaderDTO === null || downtimeHeaderDTO === undefined) {\n            throw new Error('Required parameter downtimeHeaderDTO was null or undefined when calling createUsingPOST6.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling createUsingPOST6.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<DowntimeHeaderDTO>(`${this.basePath}/downtime-headers`,\n            downtimeHeaderDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Open new downtime header with detail\n     * \n     * @param downtimeHeaderDetailDTO downtimeHeaderDetail\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createWithDetailsUsingPOST(downtimeHeaderDetailDTO: DowntimeHeaderDetailDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<DowntimeHeaderDetailDTO>;\n    public createWithDetailsUsingPOST(downtimeHeaderDetailDTO: DowntimeHeaderDetailDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DowntimeHeaderDetailDTO>>;\n    public createWithDetailsUsingPOST(downtimeHeaderDetailDTO: DowntimeHeaderDetailDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DowntimeHeaderDetailDTO>>;\n    public createWithDetailsUsingPOST(downtimeHeaderDetailDTO: DowntimeHeaderDetailDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (downtimeHeaderDetailDTO === null || downtimeHeaderDetailDTO === undefined) {\n            throw new Error('Required parameter downtimeHeaderDetailDTO was null or undefined when calling createWithDetailsUsingPOST.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling createWithDetailsUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<DowntimeHeaderDetailDTO>(`${this.basePath}/downtime-headers/details`,\n            downtimeHeaderDetailDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete downtime header\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE6(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE6(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE6(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE6(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE6.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling deleteUsingDELETE6.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/downtime-headers/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find downtime header by id\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET7(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<DowntimeHeaderDTO>;\n    public findByIdUsingGET7(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DowntimeHeaderDTO>>;\n    public findByIdUsingGET7(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DowntimeHeaderDTO>>;\n    public findByIdUsingGET7(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET7.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling findByIdUsingGET7.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<DowntimeHeaderDTO>(`${this.basePath}/downtime-headers/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find downtime header by id with details\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdWithDetailsUsingGET(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<DowntimeHeaderDetailDTO>;\n    public findByIdWithDetailsUsingGET(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DowntimeHeaderDetailDTO>>;\n    public findByIdWithDetailsUsingGET(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DowntimeHeaderDetailDTO>>;\n    public findByIdWithDetailsUsingGET(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdWithDetailsUsingGET.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling findByIdWithDetailsUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<DowntimeHeaderDetailDTO>(`${this.basePath}/downtime-headers/details/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all downtime header\n     * \n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET7(idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<Array<DowntimeHeaderDTO>>;\n    public getAllUsingGET7(idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DowntimeHeaderDTO>>>;\n    public getAllUsingGET7(idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DowntimeHeaderDTO>>>;\n    public getAllUsingGET7(idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getAllUsingGET7.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<DowntimeHeaderDTO>>(`${this.basePath}/downtime-headers`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all downtime header with details\n     * \n     * @param page page\n     * @param idEmployee Employee Id\n     * @param count count\n     * @param order order\n     * @param sortProperty sort\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllWithDetailsUsingGET(page: number, idEmployee: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceDowntimeHeaderDetailDTO>;\n    public getAllWithDetailsUsingGET(page: number, idEmployee: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceDowntimeHeaderDetailDTO>>;\n    public getAllWithDetailsUsingGET(page: number, idEmployee: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceDowntimeHeaderDetailDTO>>;\n    public getAllWithDetailsUsingGET(page: number, idEmployee: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllWithDetailsUsingGET.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getAllWithDetailsUsingGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceDowntimeHeaderDetailDTO>(`${this.basePath}/downtime-headers/details`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Dashboard\n     * \n     * @param date date\n     * @param shiftId shiftId\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getDashboardUsingGET(date: string, shiftId: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<DashboardDowntimeDTO>;\n    public getDashboardUsingGET(date: string, shiftId: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DashboardDowntimeDTO>>;\n    public getDashboardUsingGET(date: string, shiftId: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DashboardDowntimeDTO>>;\n    public getDashboardUsingGET(date: string, shiftId: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (date === null || date === undefined) {\n            throw new Error('Required parameter date was null or undefined when calling getDashboardUsingGET.');\n        }\n        if (shiftId === null || shiftId === undefined) {\n            throw new Error('Required parameter shiftId was null or undefined when calling getDashboardUsingGET.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getDashboardUsingGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (date !== undefined) {\n            queryParameters = queryParameters.set('date', <any>date);\n        }\n        if (shiftId !== undefined) {\n            queryParameters = queryParameters.set('shiftId', <any>shiftId);\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<DashboardDowntimeDTO>(`${this.basePath}/downtime-headers/dashboard`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update downtime header\n     * \n     * @param id id\n     * @param downtimeHeaderDTO downtimeheader\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT6(id: number, downtimeHeaderDTO: DowntimeHeaderDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<DowntimeHeaderDTO>;\n    public updateUsingPUT6(id: number, downtimeHeaderDTO: DowntimeHeaderDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DowntimeHeaderDTO>>;\n    public updateUsingPUT6(id: number, downtimeHeaderDTO: DowntimeHeaderDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DowntimeHeaderDTO>>;\n    public updateUsingPUT6(id: number, downtimeHeaderDTO: DowntimeHeaderDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT6.');\n        }\n        if (downtimeHeaderDTO === null || downtimeHeaderDTO === undefined) {\n            throw new Error('Required parameter downtimeHeaderDTO was null or undefined when calling updateUsingPUT6.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling updateUsingPUT6.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<DowntimeHeaderDTO>(`${this.basePath}/downtime-headers/${encodeURIComponent(String(id))}`,\n            downtimeHeaderDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { DowntimeReasonDTO } from '../model/downtimeReasonDTO';\nimport { SliceDowntimeReasonDTO } from '../model/sliceDowntimeReasonDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DowntimeReasonControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new downtime reason\n     * \n     * @param downtimeReasonDTO downtimereason\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST7(downtimeReasonDTO: DowntimeReasonDTO, observe?: 'body', reportProgress?: boolean): Observable<DowntimeReasonDTO>;\n    public createUsingPOST7(downtimeReasonDTO: DowntimeReasonDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DowntimeReasonDTO>>;\n    public createUsingPOST7(downtimeReasonDTO: DowntimeReasonDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DowntimeReasonDTO>>;\n    public createUsingPOST7(downtimeReasonDTO: DowntimeReasonDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (downtimeReasonDTO === null || downtimeReasonDTO === undefined) {\n            throw new Error('Required parameter downtimeReasonDTO was null or undefined when calling createUsingPOST7.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<DowntimeReasonDTO>(`${this.basePath}/downtime-reasons`,\n            downtimeReasonDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete downtime reason\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE7(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE7(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE7(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE7(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE7.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/downtime-reasons/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find downtime reason by id\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET8(id: number, observe?: 'body', reportProgress?: boolean): Observable<DowntimeReasonDTO>;\n    public findByIdUsingGET8(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DowntimeReasonDTO>>;\n    public findByIdUsingGET8(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DowntimeReasonDTO>>;\n    public findByIdUsingGET8(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET8.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<DowntimeReasonDTO>(`${this.basePath}/downtime-reasons/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all downtime reasons\n     * \n     * @param idEmployee Employee Id\n     * @param page \n     * @param count \n     * @param order \n     * @param sortProperty \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET8(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceDowntimeReasonDTO>;\n    public getAllUsingGET8(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceDowntimeReasonDTO>>;\n    public getAllUsingGET8(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceDowntimeReasonDTO>>;\n    public getAllUsingGET8(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getAllUsingGET8.');\n        }\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET8.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceDowntimeReasonDTO>(`${this.basePath}/downtime-reasons`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update downtime reason\n     * \n     * @param id id\n     * @param downtimeReasonDTO downtimereason\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT7(id: number, downtimeReasonDTO: DowntimeReasonDTO, observe?: 'body', reportProgress?: boolean): Observable<DowntimeReasonDTO>;\n    public updateUsingPUT7(id: number, downtimeReasonDTO: DowntimeReasonDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DowntimeReasonDTO>>;\n    public updateUsingPUT7(id: number, downtimeReasonDTO: DowntimeReasonDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DowntimeReasonDTO>>;\n    public updateUsingPUT7(id: number, downtimeReasonDTO: DowntimeReasonDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT7.');\n        }\n        if (downtimeReasonDTO === null || downtimeReasonDTO === undefined) {\n            throw new Error('Required parameter downtimeReasonDTO was null or undefined when calling updateUsingPUT7.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<DowntimeReasonDTO>(`${this.basePath}/downtime-reasons/${encodeURIComponent(String(id))}`,\n            downtimeReasonDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { DowntimeTypeReasonDTO } from '../model/downtimeTypeReasonDTO';\nimport { SliceDowntimeTypeReasonDTO } from '../model/sliceDowntimeTypeReasonDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DowntimeTypeReasonControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new downtime reason\n     * \n     * @param downtimeTypeReasonDTO downtimetypereason\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST8(downtimeTypeReasonDTO: DowntimeTypeReasonDTO, observe?: 'body', reportProgress?: boolean): Observable<DowntimeTypeReasonDTO>;\n    public createUsingPOST8(downtimeTypeReasonDTO: DowntimeTypeReasonDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DowntimeTypeReasonDTO>>;\n    public createUsingPOST8(downtimeTypeReasonDTO: DowntimeTypeReasonDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DowntimeTypeReasonDTO>>;\n    public createUsingPOST8(downtimeTypeReasonDTO: DowntimeTypeReasonDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (downtimeTypeReasonDTO === null || downtimeTypeReasonDTO === undefined) {\n            throw new Error('Required parameter downtimeTypeReasonDTO was null or undefined when calling createUsingPOST8.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<DowntimeTypeReasonDTO>(`${this.basePath}/downtime-type-reasons`,\n            downtimeTypeReasonDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete downtime reason\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE8(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE8(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE8(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE8(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE8.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/downtime-type-reasons/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find downtime reason by id\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET9(id: number, observe?: 'body', reportProgress?: boolean): Observable<DowntimeTypeReasonDTO>;\n    public findByIdUsingGET9(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DowntimeTypeReasonDTO>>;\n    public findByIdUsingGET9(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DowntimeTypeReasonDTO>>;\n    public findByIdUsingGET9(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET9.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<DowntimeTypeReasonDTO>(`${this.basePath}/downtime-type-reasons/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all\n     * \n     * @param page \n     * @param count \n     * @param order \n     * @param sortProperty \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET9(page: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceDowntimeTypeReasonDTO>;\n    public getAllUsingGET9(page: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceDowntimeTypeReasonDTO>>;\n    public getAllUsingGET9(page: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceDowntimeTypeReasonDTO>>;\n    public getAllUsingGET9(page: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET9.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceDowntimeTypeReasonDTO>(`${this.basePath}/downtime-type-reasons`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update downtime reason\n     * \n     * @param id id\n     * @param downtimeTypeReasonDTO downtimetypereason\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT8(id: number, downtimeTypeReasonDTO: DowntimeTypeReasonDTO, observe?: 'body', reportProgress?: boolean): Observable<DowntimeTypeReasonDTO>;\n    public updateUsingPUT8(id: number, downtimeTypeReasonDTO: DowntimeTypeReasonDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DowntimeTypeReasonDTO>>;\n    public updateUsingPUT8(id: number, downtimeTypeReasonDTO: DowntimeTypeReasonDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DowntimeTypeReasonDTO>>;\n    public updateUsingPUT8(id: number, downtimeTypeReasonDTO: DowntimeTypeReasonDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT8.');\n        }\n        if (downtimeTypeReasonDTO === null || downtimeTypeReasonDTO === undefined) {\n            throw new Error('Required parameter downtimeTypeReasonDTO was null or undefined when calling updateUsingPUT8.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<DowntimeTypeReasonDTO>(`${this.basePath}/downtime-type-reasons/${encodeURIComponent(String(id))}`,\n            downtimeTypeReasonDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { EmployeeDTO } from '../model/employeeDTO';\nimport { SliceEmployeeDTO } from '../model/sliceEmployeeDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class EmployeesControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new employee\n     * \n     * @param employeeDTO employee\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST9(employeeDTO: EmployeeDTO, observe?: 'body', reportProgress?: boolean): Observable<EmployeeDTO>;\n    public createUsingPOST9(employeeDTO: EmployeeDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmployeeDTO>>;\n    public createUsingPOST9(employeeDTO: EmployeeDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmployeeDTO>>;\n    public createUsingPOST9(employeeDTO: EmployeeDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (employeeDTO === null || employeeDTO === undefined) {\n            throw new Error('Required parameter employeeDTO was null or undefined when calling createUsingPOST9.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<EmployeeDTO>(`${this.basePath}/employees`,\n            employeeDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete employee\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE9(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE9(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE9(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE9(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE9.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/employees/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find employee by enroll and company id\n     * \n     * @param enroll enroll\n     * @param companyId companyId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByEnrollAndCompanyIdUsingGET(enroll: number, companyId: number, observe?: 'body', reportProgress?: boolean): Observable<EmployeeDTO>;\n    public findByEnrollAndCompanyIdUsingGET(enroll: number, companyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmployeeDTO>>;\n    public findByEnrollAndCompanyIdUsingGET(enroll: number, companyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmployeeDTO>>;\n    public findByEnrollAndCompanyIdUsingGET(enroll: number, companyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (enroll === null || enroll === undefined) {\n            throw new Error('Required parameter enroll was null or undefined when calling findByEnrollAndCompanyIdUsingGET.');\n        }\n        if (companyId === null || companyId === undefined) {\n            throw new Error('Required parameter companyId was null or undefined when calling findByEnrollAndCompanyIdUsingGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (enroll !== undefined) {\n            queryParameters = queryParameters.set('enroll', <any>enroll);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<EmployeeDTO>(`${this.basePath}/employees/companies/${encodeURIComponent(String(companyId))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find employee by id\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET10(id: number, observe?: 'body', reportProgress?: boolean): Observable<EmployeeDTO>;\n    public findByIdUsingGET10(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmployeeDTO>>;\n    public findByIdUsingGET10(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmployeeDTO>>;\n    public findByIdUsingGET10(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET10.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<EmployeeDTO>(`${this.basePath}/employees/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all employees\n     * \n     * @param idEmployee Employee Id\n     * @param page \n     * @param count \n     * @param order \n     * @param sortProperty \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET10(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceEmployeeDTO>;\n    public getAllUsingGET10(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceEmployeeDTO>>;\n    public getAllUsingGET10(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceEmployeeDTO>>;\n    public getAllUsingGET10(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getAllUsingGET10.');\n        }\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET10.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceEmployeeDTO>(`${this.basePath}/employees`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update employee\n     * \n     * @param id id\n     * @param employeeDTO employee\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT9(id: number, employeeDTO: EmployeeDTO, observe?: 'body', reportProgress?: boolean): Observable<EmployeeDTO>;\n    public updateUsingPUT9(id: number, employeeDTO: EmployeeDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EmployeeDTO>>;\n    public updateUsingPUT9(id: number, employeeDTO: EmployeeDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EmployeeDTO>>;\n    public updateUsingPUT9(id: number, employeeDTO: EmployeeDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT9.');\n        }\n        if (employeeDTO === null || employeeDTO === undefined) {\n            throw new Error('Required parameter employeeDTO was null or undefined when calling updateUsingPUT9.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<EmployeeDTO>(`${this.basePath}/employees/${encodeURIComponent(String(id))}`,\n            employeeDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { LineDTO } from '../model/lineDTO';\nimport { SliceLineDTO } from '../model/sliceLineDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class LinesControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new line\n     * \n     * @param lineDTO line\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST10(lineDTO: LineDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<LineDTO>;\n    public createUsingPOST10(lineDTO: LineDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LineDTO>>;\n    public createUsingPOST10(lineDTO: LineDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LineDTO>>;\n    public createUsingPOST10(lineDTO: LineDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (lineDTO === null || lineDTO === undefined) {\n            throw new Error('Required parameter lineDTO was null or undefined when calling createUsingPOST10.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling createUsingPOST10.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<LineDTO>(`${this.basePath}/lines`,\n            lineDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete line\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE10(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE10(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE10(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE10(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE10.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling deleteUsingDELETE10.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/lines/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find line by id\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET11(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<LineDTO>;\n    public findByIdUsingGET11(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LineDTO>>;\n    public findByIdUsingGET11(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LineDTO>>;\n    public findByIdUsingGET11(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET11.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling findByIdUsingGET11.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<LineDTO>(`${this.basePath}/lines/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all shifts\n     * \n     * @param idEmployee Employee Id\n     * @param page \n     * @param count \n     * @param order \n     * @param sortProperty \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET11(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceLineDTO>;\n    public getAllUsingGET11(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceLineDTO>>;\n    public getAllUsingGET11(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceLineDTO>>;\n    public getAllUsingGET11(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getAllUsingGET11.');\n        }\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET11.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceLineDTO>(`${this.basePath}/lines`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update line\n     * \n     * @param id id\n     * @param lineDTO line\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT10(id: number, lineDTO: LineDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<LineDTO>;\n    public updateUsingPUT10(id: number, lineDTO: LineDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LineDTO>>;\n    public updateUsingPUT10(id: number, lineDTO: LineDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LineDTO>>;\n    public updateUsingPUT10(id: number, lineDTO: LineDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT10.');\n        }\n        if (lineDTO === null || lineDTO === undefined) {\n            throw new Error('Required parameter lineDTO was null or undefined when calling updateUsingPUT10.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling updateUsingPUT10.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<LineDTO>(`${this.basePath}/lines/${encodeURIComponent(String(id))}`,\n            lineDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { MachineDTO } from '../model/machineDTO';\nimport { SliceMachineDTO } from '../model/sliceMachineDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class MachinesControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new machine\n     * \n     * @param machineDTO machine\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST11(machineDTO: MachineDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<MachineDTO>;\n    public createUsingPOST11(machineDTO: MachineDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MachineDTO>>;\n    public createUsingPOST11(machineDTO: MachineDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MachineDTO>>;\n    public createUsingPOST11(machineDTO: MachineDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (machineDTO === null || machineDTO === undefined) {\n            throw new Error('Required parameter machineDTO was null or undefined when calling createUsingPOST11.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling createUsingPOST11.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<MachineDTO>(`${this.basePath}/machines`,\n            machineDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete machine\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE11(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE11(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE11(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE11(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE11.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling deleteUsingDELETE11.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/machines/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find machine by id\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET12(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<MachineDTO>;\n    public findByIdUsingGET12(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MachineDTO>>;\n    public findByIdUsingGET12(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MachineDTO>>;\n    public findByIdUsingGET12(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET12.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling findByIdUsingGET12.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<MachineDTO>(`${this.basePath}/machines/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List machines by workstation\n     * \n     * @param idWorkstation idWorkstation\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByWorkstationUsingGET(idWorkstation: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<Array<MachineDTO>>;\n    public findByWorkstationUsingGET(idWorkstation: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MachineDTO>>>;\n    public findByWorkstationUsingGET(idWorkstation: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MachineDTO>>>;\n    public findByWorkstationUsingGET(idWorkstation: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idWorkstation === null || idWorkstation === undefined) {\n            throw new Error('Required parameter idWorkstation was null or undefined when calling findByWorkstationUsingGET.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling findByWorkstationUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<MachineDTO>>(`${this.basePath}/machines/workstations/${encodeURIComponent(String(idWorkstation))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all shifts\n     * \n     * @param idEmployee Employee Id\n     * @param page \n     * @param count \n     * @param order \n     * @param sortProperty \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET12(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceMachineDTO>;\n    public getAllUsingGET12(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceMachineDTO>>;\n    public getAllUsingGET12(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceMachineDTO>>;\n    public getAllUsingGET12(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getAllUsingGET12.');\n        }\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET12.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceMachineDTO>(`${this.basePath}/machines`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update machine\n     * \n     * @param id id\n     * @param machineDTO machine\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT11(id: number, machineDTO: MachineDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<MachineDTO>;\n    public updateUsingPUT11(id: number, machineDTO: MachineDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MachineDTO>>;\n    public updateUsingPUT11(id: number, machineDTO: MachineDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MachineDTO>>;\n    public updateUsingPUT11(id: number, machineDTO: MachineDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT11.');\n        }\n        if (machineDTO === null || machineDTO === undefined) {\n            throw new Error('Required parameter machineDTO was null or undefined when calling updateUsingPUT11.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling updateUsingPUT11.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<MachineDTO>(`${this.basePath}/machines/${encodeURIComponent(String(id))}`,\n            machineDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { MaintenanceActionDTO } from '../model/maintenanceActionDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class MaintenanceActionControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new Maintenance Action\n     * \n     * @param maintenanceActionDTO maintenanceAction\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST12(maintenanceActionDTO: MaintenanceActionDTO, observe?: 'body', reportProgress?: boolean): Observable<MaintenanceActionDTO>;\n    public createUsingPOST12(maintenanceActionDTO: MaintenanceActionDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MaintenanceActionDTO>>;\n    public createUsingPOST12(maintenanceActionDTO: MaintenanceActionDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MaintenanceActionDTO>>;\n    public createUsingPOST12(maintenanceActionDTO: MaintenanceActionDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (maintenanceActionDTO === null || maintenanceActionDTO === undefined) {\n            throw new Error('Required parameter maintenanceActionDTO was null or undefined when calling createUsingPOST12.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<MaintenanceActionDTO>(`${this.basePath}/maintenance-action`,\n            maintenanceActionDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete Maintenance Action\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE12(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE12(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE12(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE12(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE12.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/maintenance-action/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find Maintenance Action by id\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET13(id: number, observe?: 'body', reportProgress?: boolean): Observable<MaintenanceActionDTO>;\n    public findByIdUsingGET13(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MaintenanceActionDTO>>;\n    public findByIdUsingGET13(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MaintenanceActionDTO>>;\n    public findByIdUsingGET13(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET13.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<MaintenanceActionDTO>(`${this.basePath}/maintenance-action/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all Maintenance Action Controller\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET13(observe?: 'body', reportProgress?: boolean): Observable<Array<MaintenanceActionDTO>>;\n    public getAllUsingGET13(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MaintenanceActionDTO>>>;\n    public getAllUsingGET13(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MaintenanceActionDTO>>>;\n    public getAllUsingGET13(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<MaintenanceActionDTO>>(`${this.basePath}/maintenance-action`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Maintenance Action\n     * \n     * @param id id\n     * @param maintenanceActionDTO maintenanceAction\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT12(id: number, maintenanceActionDTO: MaintenanceActionDTO, observe?: 'body', reportProgress?: boolean): Observable<MaintenanceActionDTO>;\n    public updateUsingPUT12(id: number, maintenanceActionDTO: MaintenanceActionDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MaintenanceActionDTO>>;\n    public updateUsingPUT12(id: number, maintenanceActionDTO: MaintenanceActionDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MaintenanceActionDTO>>;\n    public updateUsingPUT12(id: number, maintenanceActionDTO: MaintenanceActionDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT12.');\n        }\n        if (maintenanceActionDTO === null || maintenanceActionDTO === undefined) {\n            throw new Error('Required parameter maintenanceActionDTO was null or undefined when calling updateUsingPUT12.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<MaintenanceActionDTO>(`${this.basePath}/maintenance-action/${encodeURIComponent(String(id))}`,\n            maintenanceActionDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { ModelDTO } from '../model/modelDTO';\nimport { SliceModelDTO } from '../model/sliceModelDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ModelsControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new model\n     * \n     * @param modelDTO model\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST13(modelDTO: ModelDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<ModelDTO>;\n    public createUsingPOST13(modelDTO: ModelDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelDTO>>;\n    public createUsingPOST13(modelDTO: ModelDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelDTO>>;\n    public createUsingPOST13(modelDTO: ModelDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (modelDTO === null || modelDTO === undefined) {\n            throw new Error('Required parameter modelDTO was null or undefined when calling createUsingPOST13.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling createUsingPOST13.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ModelDTO>(`${this.basePath}/models`,\n            modelDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete model\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE13(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE13(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE13(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE13(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE13.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling deleteUsingDELETE13.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/models/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find model by id\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET14(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<ModelDTO>;\n    public findByIdUsingGET14(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelDTO>>;\n    public findByIdUsingGET14(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelDTO>>;\n    public findByIdUsingGET14(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET14.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling findByIdUsingGET14.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<ModelDTO>(`${this.basePath}/models/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all models\n     * \n     * @param idEmployee Employee Id\n     * @param page \n     * @param count \n     * @param order \n     * @param sortProperty \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET14(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceModelDTO>;\n    public getAllUsingGET14(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceModelDTO>>;\n    public getAllUsingGET14(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceModelDTO>>;\n    public getAllUsingGET14(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getAllUsingGET14.');\n        }\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET14.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceModelDTO>(`${this.basePath}/models`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update model\n     * \n     * @param id id\n     * @param modelDTO model\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT13(id: number, modelDTO: ModelDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<ModelDTO>;\n    public updateUsingPUT13(id: number, modelDTO: ModelDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelDTO>>;\n    public updateUsingPUT13(id: number, modelDTO: ModelDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelDTO>>;\n    public updateUsingPUT13(id: number, modelDTO: ModelDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT13.');\n        }\n        if (modelDTO === null || modelDTO === undefined) {\n            throw new Error('Required parameter modelDTO was null or undefined when calling updateUsingPUT13.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling updateUsingPUT13.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<ModelDTO>(`${this.basePath}/models/${encodeURIComponent(String(id))}`,\n            modelDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { ModuleDTO } from '../model/moduleDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ModulesControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * List all modules\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET15(observe?: 'body', reportProgress?: boolean): Observable<Array<ModuleDTO>>;\n    public getAllUsingGET15(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ModuleDTO>>>;\n    public getAllUsingGET15(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ModuleDTO>>>;\n    public getAllUsingGET15(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<ModuleDTO>>(`${this.basePath}/modules`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { MovementHeaderDTO } from '../model/movementHeaderDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class MovementHeadersControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new movement header\n     * \n     * @param movementHeaderDTO movementHeader\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST14(movementHeaderDTO: MovementHeaderDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<MovementHeaderDTO>;\n    public createUsingPOST14(movementHeaderDTO: MovementHeaderDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MovementHeaderDTO>>;\n    public createUsingPOST14(movementHeaderDTO: MovementHeaderDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MovementHeaderDTO>>;\n    public createUsingPOST14(movementHeaderDTO: MovementHeaderDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (movementHeaderDTO === null || movementHeaderDTO === undefined) {\n            throw new Error('Required parameter movementHeaderDTO was null or undefined when calling createUsingPOST14.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling createUsingPOST14.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<MovementHeaderDTO>(`${this.basePath}/movement-headers`,\n            movementHeaderDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find a running movement header by line\n     * \n     * @param idLine idLine\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByRunningAndLineUsingGET(idLine: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<MovementHeaderDTO>;\n    public findByRunningAndLineUsingGET(idLine: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MovementHeaderDTO>>;\n    public findByRunningAndLineUsingGET(idLine: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MovementHeaderDTO>>;\n    public findByRunningAndLineUsingGET(idLine: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idLine === null || idLine === undefined) {\n            throw new Error('Required parameter idLine was null or undefined when calling findByRunningAndLineUsingGET.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling findByRunningAndLineUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<MovementHeaderDTO>(`${this.basePath}/movement-headers/lines/${encodeURIComponent(String(idLine))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Movement Header by the Status\n     * \n     * @param status status\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByUsingGET(status: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<Array<MovementHeaderDTO>>;\n    public findByUsingGET(status: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MovementHeaderDTO>>>;\n    public findByUsingGET(status: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MovementHeaderDTO>>>;\n    public findByUsingGET(status: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (status === null || status === undefined) {\n            throw new Error('Required parameter status was null or undefined when calling findByUsingGET.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling findByUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<MovementHeaderDTO>>(`${this.basePath}/movement-headers/status/${encodeURIComponent(String(status))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find movement header by production order\n     * \n     * @param numProductionOrder numProductionOrder\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getByProductionOrderUsingGET(numProductionOrder: string, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<MovementHeaderDTO>;\n    public getByProductionOrderUsingGET(numProductionOrder: string, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MovementHeaderDTO>>;\n    public getByProductionOrderUsingGET(numProductionOrder: string, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MovementHeaderDTO>>;\n    public getByProductionOrderUsingGET(numProductionOrder: string, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (numProductionOrder === null || numProductionOrder === undefined) {\n            throw new Error('Required parameter numProductionOrder was null or undefined when calling getByProductionOrderUsingGET.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getByProductionOrderUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<MovementHeaderDTO>(`${this.basePath}/movement-headers/production-orders/${encodeURIComponent(String(numProductionOrder))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find movement header by its id\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUsingGET(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<MovementHeaderDTO>;\n    public getUsingGET(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MovementHeaderDTO>>;\n    public getUsingGET(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MovementHeaderDTO>>;\n    public getUsingGET(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling getUsingGET.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<MovementHeaderDTO>(`${this.basePath}/movement-headers/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update movement header\n     * \n     * @param id id\n     * @param movementHeaderDTO MovementHeader\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT14(id: number, movementHeaderDTO: MovementHeaderDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<MovementHeaderDTO>;\n    public updateUsingPUT14(id: number, movementHeaderDTO: MovementHeaderDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MovementHeaderDTO>>;\n    public updateUsingPUT14(id: number, movementHeaderDTO: MovementHeaderDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MovementHeaderDTO>>;\n    public updateUsingPUT14(id: number, movementHeaderDTO: MovementHeaderDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT14.');\n        }\n        if (movementHeaderDTO === null || movementHeaderDTO === undefined) {\n            throw new Error('Required parameter movementHeaderDTO was null or undefined when calling updateUsingPUT14.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling updateUsingPUT14.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<MovementHeaderDTO>(`${this.basePath}/movement-headers/${encodeURIComponent(String(id))}`,\n            movementHeaderDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { MovementHistoryDTO } from '../model/movementHistoryDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class MovementHistoriesControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new movement history\n     * \n     * @param movementHistoryDTO MovementHistory\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST15(movementHistoryDTO: MovementHistoryDTO, observe?: 'body', reportProgress?: boolean): Observable<MovementHistoryDTO>;\n    public createUsingPOST15(movementHistoryDTO: MovementHistoryDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MovementHistoryDTO>>;\n    public createUsingPOST15(movementHistoryDTO: MovementHistoryDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MovementHistoryDTO>>;\n    public createUsingPOST15(movementHistoryDTO: MovementHistoryDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (movementHistoryDTO === null || movementHistoryDTO === undefined) {\n            throw new Error('Required parameter movementHistoryDTO was null or undefined when calling createUsingPOST15.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<MovementHistoryDTO>(`${this.basePath}/movement-histories`,\n            movementHistoryDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find movement History by production order\n     * \n     * @param idMovementHeader idMovementHeader\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByMovementHeaderUsingGET(idMovementHeader: number, observe?: 'body', reportProgress?: boolean): Observable<Array<MovementHistoryDTO>>;\n    public findByMovementHeaderUsingGET(idMovementHeader: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MovementHistoryDTO>>>;\n    public findByMovementHeaderUsingGET(idMovementHeader: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MovementHistoryDTO>>>;\n    public findByMovementHeaderUsingGET(idMovementHeader: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idMovementHeader === null || idMovementHeader === undefined) {\n            throw new Error('Required parameter idMovementHeader was null or undefined when calling findByMovementHeaderUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<MovementHistoryDTO>>(`${this.basePath}/movement-histories/movement-headers/${encodeURIComponent(String(idMovementHeader))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all movement histories by movement header and workstation\n     * \n     * @param idMovementHeader idMovementHeader\n     * @param idWorkstation idWorkstation\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getByMovementHeaderAndWorkstationUsingGET(idMovementHeader: number, idWorkstation: number, observe?: 'body', reportProgress?: boolean): Observable<Array<MovementHistoryDTO>>;\n    public getByMovementHeaderAndWorkstationUsingGET(idMovementHeader: number, idWorkstation: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MovementHistoryDTO>>>;\n    public getByMovementHeaderAndWorkstationUsingGET(idMovementHeader: number, idWorkstation: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MovementHistoryDTO>>>;\n    public getByMovementHeaderAndWorkstationUsingGET(idMovementHeader: number, idWorkstation: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idMovementHeader === null || idMovementHeader === undefined) {\n            throw new Error('Required parameter idMovementHeader was null or undefined when calling getByMovementHeaderAndWorkstationUsingGET.');\n        }\n        if (idWorkstation === null || idWorkstation === undefined) {\n            throw new Error('Required parameter idWorkstation was null or undefined when calling getByMovementHeaderAndWorkstationUsingGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (idMovementHeader !== undefined) {\n            queryParameters = queryParameters.set('idMovementHeader', <any>idMovementHeader);\n        }\n        if (idWorkstation !== undefined) {\n            queryParameters = queryParameters.set('idWorkstation', <any>idWorkstation);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<MovementHistoryDTO>>(`${this.basePath}/movement-histories`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { PositionDTO } from '../model/positionDTO';\nimport { SlicePositionDTO } from '../model/slicePositionDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class PositionControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new position\n     * \n     * @param positionDTO position\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST16(positionDTO: PositionDTO, observe?: 'body', reportProgress?: boolean): Observable<PositionDTO>;\n    public createUsingPOST16(positionDTO: PositionDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PositionDTO>>;\n    public createUsingPOST16(positionDTO: PositionDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PositionDTO>>;\n    public createUsingPOST16(positionDTO: PositionDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (positionDTO === null || positionDTO === undefined) {\n            throw new Error('Required parameter positionDTO was null or undefined when calling createUsingPOST16.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<PositionDTO>(`${this.basePath}/positions`,\n            positionDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete position\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE14(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE14(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE14(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE14(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE14.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/positions/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find position by id\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET15(id: number, observe?: 'body', reportProgress?: boolean): Observable<PositionDTO>;\n    public findByIdUsingGET15(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PositionDTO>>;\n    public findByIdUsingGET15(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PositionDTO>>;\n    public findByIdUsingGET15(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET15.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<PositionDTO>(`${this.basePath}/positions/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all\n     * \n     * @param page \n     * @param count \n     * @param order \n     * @param sortProperty \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET16(page: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SlicePositionDTO>;\n    public getAllUsingGET16(page: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SlicePositionDTO>>;\n    public getAllUsingGET16(page: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SlicePositionDTO>>;\n    public getAllUsingGET16(page: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET16.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SlicePositionDTO>(`${this.basePath}/positions`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update position\n     * \n     * @param id id\n     * @param positionDTO position\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT15(id: number, positionDTO: PositionDTO, observe?: 'body', reportProgress?: boolean): Observable<PositionDTO>;\n    public updateUsingPUT15(id: number, positionDTO: PositionDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PositionDTO>>;\n    public updateUsingPUT15(id: number, positionDTO: PositionDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PositionDTO>>;\n    public updateUsingPUT15(id: number, positionDTO: PositionDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT15.');\n        }\n        if (positionDTO === null || positionDTO === undefined) {\n            throw new Error('Required parameter positionDTO was null or undefined when calling updateUsingPUT15.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<PositionDTO>(`${this.basePath}/positions/${encodeURIComponent(String(id))}`,\n            positionDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { ProductionOrderDTO } from '../model/productionOrderDTO';\nimport { SliceProductionOrderDTO } from '../model/sliceProductionOrderDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ProductionOrdersControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Find production by Production Order\n     * \n     * @param numOrdemProducao Production Order\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET16(numOrdemProducao: string, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<ProductionOrderDTO>;\n    public findByIdUsingGET16(numOrdemProducao: string, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProductionOrderDTO>>;\n    public findByIdUsingGET16(numOrdemProducao: string, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProductionOrderDTO>>;\n    public findByIdUsingGET16(numOrdemProducao: string, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (numOrdemProducao === null || numOrdemProducao === undefined) {\n            throw new Error('Required parameter numOrdemProducao was null or undefined when calling findByIdUsingGET16.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling findByIdUsingGET16.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<ProductionOrderDTO>(`${this.basePath}/production-orders/${encodeURIComponent(String(numOrdemProducao))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all production orders\n     * \n     * @param page page\n     * @param idEmployee Employee Id\n     * @param count count\n     * @param order order\n     * @param sortProperty sort\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET17(page: number, idEmployee: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceProductionOrderDTO>;\n    public getAllUsingGET17(page: number, idEmployee: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceProductionOrderDTO>>;\n    public getAllUsingGET17(page: number, idEmployee: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceProductionOrderDTO>>;\n    public getAllUsingGET17(page: number, idEmployee: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET17.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getAllUsingGET17.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceProductionOrderDTO>(`${this.basePath}/production-orders`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { ProfileDTO } from '../model/profileDTO';\nimport { SliceProfileDTO } from '../model/sliceProfileDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ProfilesControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new profile\n     * \n     * @param profileDTO profile\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST17(profileDTO: ProfileDTO, observe?: 'body', reportProgress?: boolean): Observable<ProfileDTO>;\n    public createUsingPOST17(profileDTO: ProfileDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProfileDTO>>;\n    public createUsingPOST17(profileDTO: ProfileDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProfileDTO>>;\n    public createUsingPOST17(profileDTO: ProfileDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (profileDTO === null || profileDTO === undefined) {\n            throw new Error('Required parameter profileDTO was null or undefined when calling createUsingPOST17.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ProfileDTO>(`${this.basePath}/profiles`,\n            profileDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete profile\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE15(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE15(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE15(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE15(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE15.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/profiles/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find profile by id\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET17(id: number, observe?: 'body', reportProgress?: boolean): Observable<ProfileDTO>;\n    public findByIdUsingGET17(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProfileDTO>>;\n    public findByIdUsingGET17(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProfileDTO>>;\n    public findByIdUsingGET17(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET17.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<ProfileDTO>(`${this.basePath}/profiles/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all profiles\n     * \n     * @param idEmployee Employee Id\n     * @param page \n     * @param count \n     * @param order \n     * @param sortProperty \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET18(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceProfileDTO>;\n    public getAllUsingGET18(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceProfileDTO>>;\n    public getAllUsingGET18(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceProfileDTO>>;\n    public getAllUsingGET18(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getAllUsingGET18.');\n        }\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET18.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceProfileDTO>(`${this.basePath}/profiles`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update profile\n     * \n     * @param id id\n     * @param profileDTO profile\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT16(id: number, profileDTO: ProfileDTO, observe?: 'body', reportProgress?: boolean): Observable<ProfileDTO>;\n    public updateUsingPUT16(id: number, profileDTO: ProfileDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProfileDTO>>;\n    public updateUsingPUT16(id: number, profileDTO: ProfileDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProfileDTO>>;\n    public updateUsingPUT16(id: number, profileDTO: ProfileDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT16.');\n        }\n        if (profileDTO === null || profileDTO === undefined) {\n            throw new Error('Required parameter profileDTO was null or undefined when calling updateUsingPUT16.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<ProfileDTO>(`${this.basePath}/profiles/${encodeURIComponent(String(id))}`,\n            profileDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { RouteDTO } from '../model/routeDTO';\nimport { SliceRouteDTO } from '../model/sliceRouteDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class RoutesControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new route\n     * \n     * @param routeDTO route\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST18(routeDTO: RouteDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<RouteDTO>;\n    public createUsingPOST18(routeDTO: RouteDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RouteDTO>>;\n    public createUsingPOST18(routeDTO: RouteDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RouteDTO>>;\n    public createUsingPOST18(routeDTO: RouteDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (routeDTO === null || routeDTO === undefined) {\n            throw new Error('Required parameter routeDTO was null or undefined when calling createUsingPOST18.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling createUsingPOST18.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<RouteDTO>(`${this.basePath}/routes`,\n            routeDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete route\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE16(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE16(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE16(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE16(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE16.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling deleteUsingDELETE16.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/routes/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find route by id\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET18(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<RouteDTO>;\n    public findByIdUsingGET18(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RouteDTO>>;\n    public findByIdUsingGET18(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RouteDTO>>;\n    public findByIdUsingGET18(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET18.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling findByIdUsingGET18.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<RouteDTO>(`${this.basePath}/routes/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all routes\n     * \n     * @param idEmployee Employee Id\n     * @param page \n     * @param modelName modelName\n     * @param count \n     * @param order \n     * @param sortProperty \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET19(idEmployee: number, page: number, modelName?: string, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceRouteDTO>;\n    public getAllUsingGET19(idEmployee: number, page: number, modelName?: string, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceRouteDTO>>;\n    public getAllUsingGET19(idEmployee: number, page: number, modelName?: string, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceRouteDTO>>;\n    public getAllUsingGET19(idEmployee: number, page: number, modelName?: string, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getAllUsingGET19.');\n        }\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET19.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (modelName !== undefined) {\n            queryParameters = queryParameters.set('modelName', <any>modelName);\n        }\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceRouteDTO>(`${this.basePath}/routes`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update route\n     * \n     * @param id id\n     * @param routeDTO route\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT17(id: number, routeDTO: RouteDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<RouteDTO>;\n    public updateUsingPUT17(id: number, routeDTO: RouteDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RouteDTO>>;\n    public updateUsingPUT17(id: number, routeDTO: RouteDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RouteDTO>>;\n    public updateUsingPUT17(id: number, routeDTO: RouteDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT17.');\n        }\n        if (routeDTO === null || routeDTO === undefined) {\n            throw new Error('Required parameter routeDTO was null or undefined when calling updateUsingPUT17.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling updateUsingPUT17.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<RouteDTO>(`${this.basePath}/routes/${encodeURIComponent(String(id))}`,\n            routeDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { AuthDTO } from '../model/authDTO';\nimport { EmployeeDTO } from '../model/employeeDTO';\nimport { SessionDTO } from '../model/sessionDTO';\nimport { UnlockEmployeeDTO } from '../model/unlockEmployeeDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class SessionsControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Login\n     * \n     * @param authDTO auth\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public authUsingPOST(authDTO: AuthDTO, observe?: 'body', reportProgress?: boolean): Observable<SessionDTO>;\n    public authUsingPOST(authDTO: AuthDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SessionDTO>>;\n    public authUsingPOST(authDTO: AuthDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SessionDTO>>;\n    public authUsingPOST(authDTO: AuthDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (authDTO === null || authDTO === undefined) {\n            throw new Error('Required parameter authDTO was null or undefined when calling authUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<SessionDTO>(`${this.basePath}/sessions`,\n            authDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Logout\n     * \n     * @param employeeDTO session\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public logoutUsingPOST(employeeDTO: EmployeeDTO, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public logoutUsingPOST(employeeDTO: EmployeeDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public logoutUsingPOST(employeeDTO: EmployeeDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public logoutUsingPOST(employeeDTO: EmployeeDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (employeeDTO === null || employeeDTO === undefined) {\n            throw new Error('Required parameter employeeDTO was null or undefined when calling logoutUsingPOST.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.basePath}/sessions/logout`,\n            employeeDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Unlock employee\n     * \n     * @param unlockEmployeeDTO unlockEmployeeDTO\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public unlockEmployeeUsingPUT(unlockEmployeeDTO: UnlockEmployeeDTO, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public unlockEmployeeUsingPUT(unlockEmployeeDTO: UnlockEmployeeDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public unlockEmployeeUsingPUT(unlockEmployeeDTO: UnlockEmployeeDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public unlockEmployeeUsingPUT(unlockEmployeeDTO: UnlockEmployeeDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (unlockEmployeeDTO === null || unlockEmployeeDTO === undefined) {\n            throw new Error('Required parameter unlockEmployeeDTO was null or undefined when calling unlockEmployeeUsingPUT.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<any>(`${this.basePath}/sessions/unlock-employee`,\n            unlockEmployeeDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { ShiftDTO } from '../model/shiftDTO';\nimport { SliceShiftDTO } from '../model/sliceShiftDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class ShiftsControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new shift\n     * \n     * @param shiftDTO shift\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST19(shiftDTO: ShiftDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<ShiftDTO>;\n    public createUsingPOST19(shiftDTO: ShiftDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ShiftDTO>>;\n    public createUsingPOST19(shiftDTO: ShiftDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ShiftDTO>>;\n    public createUsingPOST19(shiftDTO: ShiftDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (shiftDTO === null || shiftDTO === undefined) {\n            throw new Error('Required parameter shiftDTO was null or undefined when calling createUsingPOST19.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling createUsingPOST19.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ShiftDTO>(`${this.basePath}/shifts`,\n            shiftDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete shift\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE17(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE17(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE17(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE17(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE17.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling deleteUsingDELETE17.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/shifts/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find shift by id\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET19(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<ShiftDTO>;\n    public findByIdUsingGET19(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ShiftDTO>>;\n    public findByIdUsingGET19(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ShiftDTO>>;\n    public findByIdUsingGET19(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET19.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling findByIdUsingGET19.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<ShiftDTO>(`${this.basePath}/shifts/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all shifts\n     * \n     * @param idEmployee Employee Id\n     * @param page \n     * @param count \n     * @param order \n     * @param sortProperty \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET20(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceShiftDTO>;\n    public getAllUsingGET20(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceShiftDTO>>;\n    public getAllUsingGET20(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceShiftDTO>>;\n    public getAllUsingGET20(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getAllUsingGET20.');\n        }\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET20.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceShiftDTO>(`${this.basePath}/shifts`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update shift\n     * \n     * @param id id\n     * @param shiftDTO shift\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT18(id: number, shiftDTO: ShiftDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<ShiftDTO>;\n    public updateUsingPUT18(id: number, shiftDTO: ShiftDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ShiftDTO>>;\n    public updateUsingPUT18(id: number, shiftDTO: ShiftDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ShiftDTO>>;\n    public updateUsingPUT18(id: number, shiftDTO: ShiftDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT18.');\n        }\n        if (shiftDTO === null || shiftDTO === undefined) {\n            throw new Error('Required parameter shiftDTO was null or undefined when calling updateUsingPUT18.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling updateUsingPUT18.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<ShiftDTO>(`${this.basePath}/shifts/${encodeURIComponent(String(id))}`,\n            shiftDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { TechnicalActionsDTO } from '../model/technicalActionsDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class TechnicalActionsControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new Technical Actions\n     * \n     * @param technicalActionsDTO technicalActions\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST20(technicalActionsDTO: TechnicalActionsDTO, observe?: 'body', reportProgress?: boolean): Observable<TechnicalActionsDTO>;\n    public createUsingPOST20(technicalActionsDTO: TechnicalActionsDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TechnicalActionsDTO>>;\n    public createUsingPOST20(technicalActionsDTO: TechnicalActionsDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TechnicalActionsDTO>>;\n    public createUsingPOST20(technicalActionsDTO: TechnicalActionsDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (technicalActionsDTO === null || technicalActionsDTO === undefined) {\n            throw new Error('Required parameter technicalActionsDTO was null or undefined when calling createUsingPOST20.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<TechnicalActionsDTO>(`${this.basePath}/technical-actions`,\n            technicalActionsDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete Technical Actions\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE18(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE18(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE18(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE18(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE18.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/technical-actions/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find Technical Actions by id\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET20(id: number, observe?: 'body', reportProgress?: boolean): Observable<TechnicalActionsDTO>;\n    public findByIdUsingGET20(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TechnicalActionsDTO>>;\n    public findByIdUsingGET20(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TechnicalActionsDTO>>;\n    public findByIdUsingGET20(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET20.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<TechnicalActionsDTO>(`${this.basePath}/technical-actions/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all Technical Actions\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET21(observe?: 'body', reportProgress?: boolean): Observable<Array<TechnicalActionsDTO>>;\n    public getAllUsingGET21(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TechnicalActionsDTO>>>;\n    public getAllUsingGET21(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TechnicalActionsDTO>>>;\n    public getAllUsingGET21(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<TechnicalActionsDTO>>(`${this.basePath}/technical-actions`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Technical Actions\n     * \n     * @param id id\n     * @param technicalActionsDTO technicalActions\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT19(id: number, technicalActionsDTO: TechnicalActionsDTO, observe?: 'body', reportProgress?: boolean): Observable<TechnicalActionsDTO>;\n    public updateUsingPUT19(id: number, technicalActionsDTO: TechnicalActionsDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TechnicalActionsDTO>>;\n    public updateUsingPUT19(id: number, technicalActionsDTO: TechnicalActionsDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TechnicalActionsDTO>>;\n    public updateUsingPUT19(id: number, technicalActionsDTO: TechnicalActionsDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT19.');\n        }\n        if (technicalActionsDTO === null || technicalActionsDTO === undefined) {\n            throw new Error('Required parameter technicalActionsDTO was null or undefined when calling updateUsingPUT19.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<TechnicalActionsDTO>(`${this.basePath}/technical-actions/${encodeURIComponent(String(id))}`,\n            technicalActionsDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { SliceTechnicalAnalysisDTO } from '../model/sliceTechnicalAnalysisDTO';\nimport { TechnicalAnalysisDTO } from '../model/technicalAnalysisDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class TechnicalAnalysisControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new Technical Analysis\n     * \n     * @param technicalAnalysisDTO employee\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST21(technicalAnalysisDTO: TechnicalAnalysisDTO, observe?: 'body', reportProgress?: boolean): Observable<TechnicalAnalysisDTO>;\n    public createUsingPOST21(technicalAnalysisDTO: TechnicalAnalysisDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TechnicalAnalysisDTO>>;\n    public createUsingPOST21(technicalAnalysisDTO: TechnicalAnalysisDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TechnicalAnalysisDTO>>;\n    public createUsingPOST21(technicalAnalysisDTO: TechnicalAnalysisDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (technicalAnalysisDTO === null || technicalAnalysisDTO === undefined) {\n            throw new Error('Required parameter technicalAnalysisDTO was null or undefined when calling createUsingPOST21.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<TechnicalAnalysisDTO>(`${this.basePath}/technical-analysis`,\n            technicalAnalysisDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete Technical Analysis\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE19(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE19(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE19(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE19(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE19.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/technical-analysis/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find Technical Analysis by id\n     * \n     * @param id id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET21(id: number, observe?: 'body', reportProgress?: boolean): Observable<TechnicalAnalysisDTO>;\n    public findByIdUsingGET21(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TechnicalAnalysisDTO>>;\n    public findByIdUsingGET21(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TechnicalAnalysisDTO>>;\n    public findByIdUsingGET21(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET21.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<TechnicalAnalysisDTO>(`${this.basePath}/technical-analysis/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all Technical Analysis By Department\n     * \n     * @param idDepartment idDepartment\n     * @param idEmployee Employee Id\n     * @param page \n     * @param count \n     * @param order \n     * @param sortProperty \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET22(idDepartment: number, idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceTechnicalAnalysisDTO>;\n    public getAllUsingGET22(idDepartment: number, idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceTechnicalAnalysisDTO>>;\n    public getAllUsingGET22(idDepartment: number, idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceTechnicalAnalysisDTO>>;\n    public getAllUsingGET22(idDepartment: number, idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idDepartment === null || idDepartment === undefined) {\n            throw new Error('Required parameter idDepartment was null or undefined when calling getAllUsingGET22.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getAllUsingGET22.');\n        }\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET22.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceTechnicalAnalysisDTO>(`${this.basePath}/technical-analysis/department/${encodeURIComponent(String(idDepartment))}`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Technical Analysis\n     * \n     * @param id id\n     * @param technicalAnalysisDTO employee\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT20(id: number, technicalAnalysisDTO: TechnicalAnalysisDTO, observe?: 'body', reportProgress?: boolean): Observable<TechnicalAnalysisDTO>;\n    public updateUsingPUT20(id: number, technicalAnalysisDTO: TechnicalAnalysisDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TechnicalAnalysisDTO>>;\n    public updateUsingPUT20(id: number, technicalAnalysisDTO: TechnicalAnalysisDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TechnicalAnalysisDTO>>;\n    public updateUsingPUT20(id: number, technicalAnalysisDTO: TechnicalAnalysisDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT20.');\n        }\n        if (technicalAnalysisDTO === null || technicalAnalysisDTO === undefined) {\n            throw new Error('Required parameter technicalAnalysisDTO was null or undefined when calling updateUsingPUT20.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<TechnicalAnalysisDTO>(`${this.basePath}/technical-analysis/${encodeURIComponent(String(id))}`,\n            technicalAnalysisDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * ws-performa\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 1.3.7-20190109095830\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs/Observable';\n\nimport { SliceWorkstationDTO } from '../model/sliceWorkstationDTO';\nimport { WorkstationDTO } from '../model/workstationDTO';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class WorkstationsControllerService {\n\n    protected basePath = 'https://172.100.10.22:8082/ws-performa/api';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (let consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Create new workstation\n     * \n     * @param workstationDTO workstation\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsingPOST22(workstationDTO: WorkstationDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<WorkstationDTO>;\n    public createUsingPOST22(workstationDTO: WorkstationDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkstationDTO>>;\n    public createUsingPOST22(workstationDTO: WorkstationDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkstationDTO>>;\n    public createUsingPOST22(workstationDTO: WorkstationDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (workstationDTO === null || workstationDTO === undefined) {\n            throw new Error('Required parameter workstationDTO was null or undefined when calling createUsingPOST22.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling createUsingPOST22.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<WorkstationDTO>(`${this.basePath}/workstations`,\n            workstationDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete workstation\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUsingDELETE20(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public deleteUsingDELETE20(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public deleteUsingDELETE20(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public deleteUsingDELETE20(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteUsingDELETE20.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling deleteUsingDELETE20.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.delete<any>(`${this.basePath}/workstations/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find workstation by id\n     * \n     * @param id id\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByIdUsingGET22(id: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<WorkstationDTO>;\n    public findByIdUsingGET22(id: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkstationDTO>>;\n    public findByIdUsingGET22(id: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkstationDTO>>;\n    public findByIdUsingGET22(id: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling findByIdUsingGET22.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling findByIdUsingGET22.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<WorkstationDTO>(`${this.basePath}/workstations/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find workstations by line id\n     * \n     * @param lineId lineId\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findByLineUsingGET(lineId: number, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<Array<WorkstationDTO>>;\n    public findByLineUsingGET(lineId: number, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<WorkstationDTO>>>;\n    public findByLineUsingGET(lineId: number, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<WorkstationDTO>>>;\n    public findByLineUsingGET(lineId: number, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (lineId === null || lineId === undefined) {\n            throw new Error('Required parameter lineId was null or undefined when calling findByLineUsingGET.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling findByLineUsingGET.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<WorkstationDTO>>(`${this.basePath}/workstations/lines/${encodeURIComponent(String(lineId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * List all shifts\n     * \n     * @param idEmployee Employee Id\n     * @param page \n     * @param count \n     * @param order \n     * @param sortProperty \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getAllUsingGET23(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'body', reportProgress?: boolean): Observable<SliceWorkstationDTO>;\n    public getAllUsingGET23(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SliceWorkstationDTO>>;\n    public getAllUsingGET23(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SliceWorkstationDTO>>;\n    public getAllUsingGET23(idEmployee: number, page: number, count?: number, order?: string, sortProperty?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling getAllUsingGET23.');\n        }\n        if (page === null || page === undefined) {\n            throw new Error('Required parameter page was null or undefined when calling getAllUsingGET23.');\n        }\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (page !== undefined) {\n            queryParameters = queryParameters.set('page', <any>page);\n        }\n        if (count !== undefined) {\n            queryParameters = queryParameters.set('count', <any>count);\n        }\n        if (order !== undefined) {\n            queryParameters = queryParameters.set('order', <any>order);\n        }\n        if (sortProperty !== undefined) {\n            queryParameters = queryParameters.set('sortProperty', <any>sortProperty);\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        return this.httpClient.get<SliceWorkstationDTO>(`${this.basePath}/workstations`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update workstation\n     * \n     * @param id id\n     * @param workstationDTO workstation\n     * @param idEmployee Employee Id\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUsingPUT21(id: number, workstationDTO: WorkstationDTO, idEmployee: number, observe?: 'body', reportProgress?: boolean): Observable<WorkstationDTO>;\n    public updateUsingPUT21(id: number, workstationDTO: WorkstationDTO, idEmployee: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkstationDTO>>;\n    public updateUsingPUT21(id: number, workstationDTO: WorkstationDTO, idEmployee: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkstationDTO>>;\n    public updateUsingPUT21(id: number, workstationDTO: WorkstationDTO, idEmployee: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling updateUsingPUT21.');\n        }\n        if (workstationDTO === null || workstationDTO === undefined) {\n            throw new Error('Required parameter workstationDTO was null or undefined when calling updateUsingPUT21.');\n        }\n        if (idEmployee === null || idEmployee === undefined) {\n            throw new Error('Required parameter idEmployee was null or undefined when calling updateUsingPUT21.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (idEmployee !== undefined && idEmployee !== null) {\n            headers = headers.set('Id-Employee', String(idEmployee));\n        }\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            '*/*'\n        ];\n        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set(\"Accept\", httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set(\"Content-Type\", httpContentTypeSelected);\n        }\n\n        return this.httpClient.put<WorkstationDTO>(`${this.basePath}/workstations/${encodeURIComponent(String(id))}`,\n            workstationDTO,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param {string[]} contentTypes - the array of content types that are available for selection\n     * @returns {string} the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param {string[]} accepts - the array of content types that are available for selection.\n     * @returns {string} the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param {string} mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return {boolean} True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","    import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n* CustomHttpUrlEncodingCodec\n* Fix plus sign (+) not encoding, so sent as blank space\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n*/\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n    encodeKey(k: string): string {\n        k = super.encodeKey(k);\n        return k.replace(/\\+/gi, '%2B');\n    }\n    encodeValue(v: string): string {\n        v = super.encodeValue(v);\n        return v.replace(/\\+/gi, '%2B');\n    }\n}\n\n","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","/**\n * Classe com métodos que são reaproveitados em no projeto\n */\nexport class Utils {\n  /**\n  * retorna o mês por extenso.\n  * @param date\n  * @argument number 1-12\n  * @returns {boolean}\n  */\n  public static mesPorExtenso(month: string): string {\n    let m;\n    switch (Number(month.replace(/^0*/, ''))) {\n      case 1: {\n        m = 'janeiro';\n        break;\n      }\n      case 2: {\n        m = 'fevereiro';\n        break;\n      }\n      case 3: {\n        m = 'março';\n        break;\n      }\n      case 4: {\n        m = 'abril';\n        break;\n      }\n      case 5: {\n        m = 'maio';\n        break;\n      }\n      case 6: {\n        m = 'junho';\n        break;\n      }\n      case 7: {\n        m = 'julho';\n        break;\n      }\n      case 8: {\n        m = 'agosto';\n        break;\n      }\n      case 9: {\n        m = 'setembro';\n        break;\n      }\n      case 10: {\n        m = 'outubro';\n        break;\n      }\n      case 11: {\n        m = 'novembro';\n        break;\n      }\n      case 12: {\n        m = 'dezembro';\n        break;\n      }\n      default: {\n        m = 'Não é um mês válido!';\n        break;\n      }\n    }\n\n    return m;\n  }\n  /**\n   * retorna true se o cnpj informado for válido.\n   * @param cnpj\n   * @returns {boolean}\n   */\n  public static validaCNPJ(cnpj: string): boolean {\n    console.log(cnpj);\n    // Primeiro dígito:\n    // Uma sequência que é  mascara de pesos publicada para validação.\n    const sequence = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\n    const sumArray = new Array(sequence.length);\n    const cnpjArray = cnpj.split('');\n    // console.log(cnpjArray);\n\n    // Multiplica cada dígito do cnpj pelo peso que se encontra na mesma posição.\n    // Ex:13.347.016/0001-VV Sequencia de Pesos: [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\n    // A multiplicação seria 1*5, 3*4,  3*3 ...\n    for (let i = 0; i < sequence.length; i++) {\n      const value = Number(cnpjArray[i]);\n      sumArray[i] = sequence[i] * value;\n    }\n    // Soma todas as posições\n    let totalSumArray = Utils.somaTodasPosicoesdeUmArray(sumArray);\n\n    // Obtem o resto da divisão por 11 e subtrae base 11 do restante da divisão.\n    let result = 11 - (totalSumArray / 11);\n\n    // Adiciona o digito encontrado ao CNPJ.\n    cnpjArray.push(result.toString());\n\n\n    // Segundo dígito:\n    const sequenceSecondDigit = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\n    const sumArray2 = new Array(sequenceSecondDigit.length);\n\n    for (let i = 0; i < sequenceSecondDigit.length; i++) {\n      const value = Number(cnpjArray[i]);\n      sumArray2[i] = sequenceSecondDigit[i] * value;\n    }\n\n    totalSumArray = Utils.somaTodasPosicoesdeUmArray(sumArray2);\n\n    result = 11 - (totalSumArray / 11);\n\n    cnpjArray.push(result.toString());\n\n    const valid = cnpj === cnpjArray.toString() ? true : false;\n    console.log(valid);\n    return valid;\n  }\n\n  /**\n  * retorna resultado da soma de todas as posições de um array.\n  * @param sumArray\n  * @returns {number}\n  */\n  public static somaTodasPosicoesdeUmArray(sumArray: number[]): number {\n    let result = 0;\n    sumArray.forEach(element => {\n      result += element;\n    });\n    return result;\n  }\n\n  /**\n  * retorna resultado da soma de todas as posições de um array.\n  * @param string\n  * @returns {string}\n  */\n  public static formatPhoneNumber(v: string): string {\n    v = v.replace(/\\D/g, ''); // Remove tudo o que não é dígito\n    v = v.substring(0, 11); // Não permite que ultrapasse o número máximo de caracteres\n    v = v.replace(/^(\\d{2})(\\d)/g, '($1) $2'); // Coloca parênteses em volta dos dois primeiros dígitos\n    v = v.replace(/(\\d)(\\d{4})$/, '$1-$2'); // Coloca hífen entre o quarto e o quinto dígitos\n    return v;\n  }\n\n  public static extractValue(row, cell): string {\n    let result = row;\n    const properties = cell.split('.');\n\n    properties.forEach(property => {\n      result = result[property] ? result[property] : result;\n    });\n    return result;\n  }\n}\n"],"sourceRoot":""}