{"version":3,"file":"ngx-mask.js.map","sources":["ng://ngx-mask/app/ngx-mask/config.ts","ng://ngx-mask/app/ngx-mask/mask-applier.service.ts","ng://ngx-mask/app/ngx-mask/mask.service.ts","ng://ngx-mask/app/ngx-mask/mask.directive.ts","ng://ngx-mask/app/ngx-mask/mask.pipe.ts","ng://ngx-mask/app/ngx-mask/ngx-mask.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n    sufix: string;\n    prefix: string;\n    clearIfNotMatch: boolean;\n    showTemplate: boolean;\n    dropSpecialCharacters: boolean | string[];\n    specialCharacters: string[];\n    patterns: {\n        [character: string]: {\n            pattern: RegExp,\n            optional?: boolean\n        }\n    };\n}\n\nexport type optionsConfig = Partial<IConfig>;\nexport const config: InjectionToken<string> = new InjectionToken('config');\nexport const NEW_CONFIG: InjectionToken<string> = new InjectionToken('NEW_CONFIG');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\n\nexport const initialConfig: IConfig = {\n    sufix: '',\n    prefix: '',\n    clearIfNotMatch: false,\n    showTemplate: false,\n    dropSpecialCharacters: true,\n    specialCharacters: ['/', '(', ')', '.', ':', '-', ' ', '+', ',', '@', '[', ']'],\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true\n        },\n        'A': {\n            pattern: new RegExp('\\[a-zA-Z0-9\\]')\n        },\n        'S': {\n            pattern: new RegExp('\\[a-zA-Z\\]')\n        }\n    }\n};\n","import { Inject, Injectable } from '@angular/core';\nimport { config, IConfig } from './config';\n\n@Injectable()\nexport class MaskApplierService {\n\n    public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n    public showTemplate: IConfig['showTemplate'];\n    public clearIfNotMatch: IConfig['clearIfNotMatch'];\n    public maskExpression: string = '';\n    public maskSpecialCharacters: IConfig['specialCharacters'];\n    public maskAvailablePatterns: IConfig['patterns'];\n    public prefix: IConfig['prefix'];\n    public sufix: IConfig['sufix'];\n\n\n    private _shift: Set<number>;\n\n    public constructor(\n        @Inject(config) protected _config: IConfig\n    ) {\n        this._shift = new Set();\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.sufix = this._config.sufix;\n\n    }\n\n    public applyMask(\n        inputValue: string,\n        maskExpression: string,\n        position: number = 0,\n        cb: Function = () => {}\n      ): string {\n        if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n            return '';\n        }\n\n        let cursor: number = 0;\n        let result: string = ``;\n        let multi: boolean = false;\n\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n\n        const inputArray: string[] = inputValue.toString()\n            .split('');\n\n        // tslint:disable-next-line\n        for (let i: number = 0, inputSymbol: string = inputArray[0]; i\n        < inputArray.length; i++, inputSymbol = inputArray[i]) {\n            if (cursor === maskExpression.length) {\n                break;\n            }\n\n            if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n                result += inputSymbol;\n                cursor += 2;\n            } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])\n                && maskExpression[cursor + 1]\n                === '*') {\n                result += inputSymbol;\n                multi = true;\n            } else if (\n                maskExpression[cursor + 1] === '*' && multi\n                && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n            ) {\n                result += inputSymbol;\n                cursor += 3;\n                multi = false;\n            } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(\n                inputSymbol,\n                maskExpression[cursor + 2]\n            )) {\n                result += inputSymbol;\n                cursor += 3;\n            } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n                result += inputSymbol;\n                cursor++;\n            } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                result += maskExpression[cursor];\n                cursor++;\n                const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                    ? inputArray.length\n                    : cursor;\n                this._shift.add(shiftStep + this.prefix.length || 0);\n                i--;\n            } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1\n                && this.maskAvailablePatterns[maskExpression[cursor]]\n                && this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n                cursor++;\n                i--;\n            }\n        }\n\n        if (result.length + 1 === maskExpression.length\n            && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n\n        let shift: number = 1;\n        let newPosition: number = position + 1;\n\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n\n        cb(this._shift.has(position) ? shift : 0);\n\n        return this.prefix + result;\n    }\n\n    private _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n        return inputSymbol === maskSymbol\n            || this.maskAvailablePatterns[maskSymbol]\n            && this.maskAvailablePatterns[maskSymbol].pattern\n            && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\n    }\n}\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\nimport { config, IConfig } from './config';\nimport { DOCUMENT } from '@angular/common';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Injectable()\nexport class MaskService extends MaskApplierService {\n  public maskExpression: string = '';\n  public isNumberValue: boolean = false;\n  private _formElement: HTMLInputElement;\n  // tslint:disable-next-line\n  public onChange = (_: any) => {};\n  public onTouch = () => {};\n  public constructor(\n    // tslint:disable-next-line\n    @Inject(DOCUMENT) private document: any,\n    @Inject(config) protected _config: IConfig,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2\n  ) {\n    super(_config);\n    this._formElement = this._elementRef.nativeElement;\n  }\n\n  public applyMask(\n    inputValue: string,\n    maskExpression: string,\n    position: number = 0,\n    cb: Function = () => {}\n  ): string  {\n    const result: string  = super.applyMask(\n      inputValue,\n      maskExpression,\n      position,\n      cb\n    );\n    Array.isArray(this.dropSpecialCharacters)\n        ? this.onChange(this._removeMask(this._removePrefix(result), this.dropSpecialCharacters))\n        : this.dropSpecialCharacters === true\n         ? this.onChange(\n          this.isNumberValue\n             ? Number(this._removeMask(this._removePrefix(result), this.maskSpecialCharacters))\n             : this._removeMask(this._removePrefix(result), this.maskSpecialCharacters)\n            )\n         : this.onChange(this._removePrefix(result));\n    return result;\n  }\n\n  public applyValueChanges(\n    position: number = 0,\n    cb: Function = () => {}\n  ): void {\n    const maskedInput: string | number = this.applyMask(\n      this._formElement.value,\n      this.maskExpression,\n      position,\n      cb\n    );\n    this._formElement.value = maskedInput;\n    if (this._formElement === this.document.activeElement) {\n      return;\n    }\n    this.clearIfNotMatchFn();\n  }\n\n  public clearIfNotMatchFn(): void {\n    if (\n      this.clearIfNotMatch === true &&\n      this.maskExpression.length !== this._formElement.value.length\n    ) {\n      this.formElementProperty = ['value', ''];\n      this.applyMask(this._formElement.value, this.maskExpression);\n    }\n  }\n\n  public set formElementProperty([name, value]: [string, string | boolean]) {\n    this._renderer.setProperty(this._formElement, name, value);\n  }\n\n  private _removeMask(\n    value: string,\n    specialCharactersForRemove: string[]\n  ): string {\n    return value\n      ? value.replace(this._regExpForRemove(specialCharactersForRemove), '')\n      : value;\n  }\n\n  private _removePrefix(value: string): string {\n    if (!this.prefix) {\n      return value;\n    }\n    return value ? value.replace(this.prefix, '') : value;\n  }\n\n  private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\n    return new RegExp(\n      specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'),\n      'gi'\n    );\n  }\n}\n","import {\n  Directive,\n  forwardRef,\n  HostListener,\n  Inject,\n  Input\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MaskService } from './mask.service';\nimport { IConfig } from './config';\n\n@Directive({\n  selector: '[mask]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MaskDirective),\n      multi: true\n    },\n    MaskService\n  ]\n})\nexport class MaskDirective implements ControlValueAccessor {\n  private _maskValue: string;\n  private _inputValue: string;\n  private _position: number | null = null;\n  // tslint:disable-next-line\n  public onChange = (_: any) => { };\n  public onTouch = () => { };\n  public constructor(\n    // tslint:disable-next-line\n    @Inject(DOCUMENT) private document: any,\n    private _maskService: MaskService\n  ) { }\n\n  @Input('mask')\n  public set maskExpression(value: string) {\n    this._maskValue = value || '';\n    if (!this._maskValue) {\n      return;\n    }\n    this._maskService.maskExpression = this._maskValue;\n    this._maskService.formElementProperty = [\n      'value',\n      this._maskService.applyMask(\n        this._inputValue,\n        this._maskService.maskExpression\n      )\n    ];\n  }\n\n  @Input()\n  public set specialCharacters(value: IConfig['specialCharacters']) {\n    if (\n      !value ||\n      !Array.isArray(value) ||\n      (Array.isArray(value) && !value.length)\n    ) {\n      return;\n    }\n    this._maskService.maskSpecialCharacters = value;\n  }\n\n  @Input()\n  public set patterns(value: IConfig['patterns']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.maskAvailablePatterns = value;\n  }\n\n  @Input()\n  public set prefix(value: IConfig['prefix']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.prefix = value;\n  }\n\n  @Input()\n  public set sufix(value: IConfig['sufix']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.sufix = value;\n  }\n\n  @Input()\n  public set dropSpecialCharacters(value: IConfig['dropSpecialCharacters']) {\n    this._maskService.dropSpecialCharacters = value;\n  }\n\n  @Input()\n  public set showTemplate(value: IConfig['showTemplate']) {\n    this._maskService.showTemplate = value;\n  }\n\n  @Input()\n  public set clearIfNotMatch(value: IConfig['clearIfNotMatch']) {\n    this._maskService.clearIfNotMatch = value;\n  }\n\n  @HostListener('input', ['$event'])\n  public onInput(e: KeyboardEvent): void {\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    this._inputValue = el.value;\n    if (!this._maskValue) {\n      this.onChange(el.value);\n      return;\n    }\n    const position: number = el.selectionStart as number;\n    let caretShift: number = 0;\n    this._maskService.applyValueChanges(\n      position,\n      (shift: number) => (caretShift = shift)\n    );\n    // only set the selection if the element is active\n    if (this.document.activeElement !== el) {\n      return;\n    }\n    el.selectionStart = el.selectionEnd =\n      this._position !== null\n        ? this._position\n        : position +\n        // tslint:disable-next-line\n        ((e as any).inputType === 'deleteContentBackward' ? 0 : caretShift);\n    this._position = null;\n  }\n\n  @HostListener('blur')\n  public onBlur(): void {\n    this._maskService.clearIfNotMatchFn();\n    this.onTouch();\n  }\n\n  @HostListener('click', ['$event'])\n  public onFocus(e: MouseEvent | KeyboardEvent): void {\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    if (!this._maskService.prefix) {\n      return;\n    } else if (el !== null && el.value !== '') {\n      return;\n    } else if (el !== null) {\n      el.value = this._maskService.prefix;\n    }\n    if (\n      el !== null && el.selectionStart !== null &&\n      el.selectionStart === el.selectionEnd &&\n      el.selectionStart > this._maskService.prefix.length &&\n      // tslint:disable-next-line\n      (e as any).keyCode !== 38\n    ) {\n      return;\n    }\n    e.preventDefault();\n    el.selectionStart = el.selectionEnd = this._maskService.prefix.length;\n  }\n\n  @HostListener('keydown', ['$event'])\n  public a(e: KeyboardEvent): void {\n    if (e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 8) {\n      this.onFocus(e);\n    }\n  }\n\n  @HostListener('paste')\n  public onPaste(): void {\n    this._position = Number.MAX_SAFE_INTEGER;\n  }\n\n  /** It writes the value in the input */\n  public async writeValue(inputValue: string): Promise<void> {\n    if (inputValue === undefined) {\n      return;\n    }\n    if (typeof inputValue === 'number') {\n      inputValue = String(inputValue);\n      this._maskService.isNumberValue = true;\n    }\n    inputValue && this._maskService.maskExpression\n      ? (this._maskService.formElementProperty = [\n        'value',\n        this._maskService.applyMask(\n          inputValue,\n          this._maskService.maskExpression\n        )\n      ])\n      : (this._maskService.formElementProperty = ['value', inputValue]);\n    this._inputValue = inputValue;\n  }\n\n  // tslint:disable-next-line\n  public registerOnChange(fn: any): void {\n    this.onChange = fn;\n    this._maskService.onChange = this.onChange;\n  }\n\n  // tslint:disable-next-line\n  public registerOnTouched(fn: any): void {\n    this.onTouch = fn;\n  }\n\n  /** It disables the input element */\n  public setDisabledState(isDisabled: boolean): void {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Pipe({\n  name: 'mask',\n  pure: true\n})\nexport class MaskPipe implements PipeTransform {\n\n  public constructor(private _maskService: MaskApplierService) { }\n\n  public transform(value: string|number, mask: string): string {\n    if (!value) {\n      return '';\n    }\n    return this._maskService.applyMask(`${value}`, mask);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nimport { MaskDirective } from './mask.directive';\nimport { MaskPipe } from './mask.pipe';\n\n@NgModule({\n  providers: [MaskApplierService],\n  exports: [MaskDirective, MaskPipe],\n  declarations: [MaskDirective, MaskPipe]\n})\nexport class NgxMaskModule {\n\n  public static forRoot(configValue?: optionsConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [\n        {\n          provide: NEW_CONFIG,\n          useValue: configValue\n        },\n        {\n          provide: INITIAL_CONFIG,\n          useValue: initialConfig\n        },\n        {\n          provide: config,\n          useFactory: _configFactory,\n          deps: [INITIAL_CONFIG, NEW_CONFIG]\n        },\n      ]\n    };\n  }\n}\n\n/**\n * @internal\n */\nexport function _configFactory\n(initConfig: optionsConfig, configValue: optionsConfig | (() => optionsConfig)): Function | optionsConfig {\n  return (typeof configValue === 'function') ? configValue() : { ...initConfig, ...configValue };\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}
